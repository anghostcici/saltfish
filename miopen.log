mkdir: cannot create directory ‘prof/’: File exists

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

Reading package lists...
Building dependency tree...
Reading state information...
bc is already the newest version (1.07.1-3build1).
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x36e5d918
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 2 72 52 }
MIOpen(HIP): 	stride.values = { 59904 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 8 8 1 1 1 }
MIOpen(HIP): 	stride.values = { 8 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 2 72 52 }
MIOpen(HIP): 	stride.values = { 59904 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc20f7b330
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {8, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f38ad200000
MIOpen(HIP): 	wDesc = {8, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f38ad21d400
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f38ad21d800
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 8
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 2 -H 72 -W 52 -k 8 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc20f7b090
MIOpen(HIP): 	xDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f38ad200000
MIOpen(HIP): 	wDesc = {8, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f38ad21d400
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc20f7b098
MIOpen(HIP): 	yDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f38ad21d800
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 2 -H 72 -W 52 -k 8 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {8, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 2 72 52 }
MIOpen(HIP): 	stride.values = { 59904 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 8 8 1 1 1 }
MIOpen(HIP): 	stride.values = { 8 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 2 72 52 }
MIOpen(HIP): 	stride.values = { 59904 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc20f7b330
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc20f7b090
MIOpen(HIP): 	xDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f38ad200000
MIOpen(HIP): 	wDesc = {8, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f38ad21d400
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc20f7b098
MIOpen(HIP): 	yDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f38ad23ac00
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 2 -H 72 -W 52 -k 8 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {8, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 2 72 52 }
MIOpen(HIP): 	stride.values = { 59904 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 8 8 1 1 1 }
MIOpen(HIP): 	stride.values = { 8 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 2 72 52 }
MIOpen(HIP): 	stride.values = { 59904 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc20f7b330
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc20f7b090
MIOpen(HIP): 	xDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f38ad200000
MIOpen(HIP): 	wDesc = {8, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f38ad21d400
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc20f7b098
MIOpen(HIP): 	yDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f38ad23ac00
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 2 -H 72 -W 52 -k 8 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {8, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 2 72 52 }
MIOpen(HIP): 	stride.values = { 59904 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 8 8 1 1 1 }
MIOpen(HIP): 	stride.values = { 8 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 2 72 52 }
MIOpen(HIP): 	stride.values = { 59904 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc20f7b330
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc20f7b090
MIOpen(HIP): 	xDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f38ad200000
MIOpen(HIP): 	wDesc = {8, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f38ad21d400
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc20f7b098
MIOpen(HIP): 	yDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f38ad23ac00
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 2 -H 72 -W 52 -k 8 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {8, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 2 72 52 }
MIOpen(HIP): 	stride.values = { 59904 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 8 8 1 1 1 }
MIOpen(HIP): 	stride.values = { 8 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 2 72 52 }
MIOpen(HIP): 	stride.values = { 59904 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc20f7b330
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc20f7b090
MIOpen(HIP): 	xDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f38ad200000
MIOpen(HIP): 	wDesc = {8, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f38ad21d400
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc20f7b098
MIOpen(HIP): 	yDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f38ad23ac00
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 2 -H 72 -W 52 -k 8 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {8, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 2 72 52 }
MIOpen(HIP): 	stride.values = { 59904 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 8 8 1 1 1 }
MIOpen(HIP): 	stride.values = { 8 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 2 72 52 }
MIOpen(HIP): 	stride.values = { 59904 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc20f7b330
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc20f7b090
MIOpen(HIP): 	xDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f38ad200000
MIOpen(HIP): 	wDesc = {8, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f38ad21d400
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc20f7b098
MIOpen(HIP): 	yDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f38ad23ac00
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 2 -H 72 -W 52 -k 8 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {8, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 2, 72, 52}, {59904, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x4137ca78
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 4 74 54 }
MIOpen(HIP): 	stride.values = { 127872 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 8 3 3 3 }
MIOpen(HIP): 	stride.values = { 216 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe53d41660
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 8, 3, 3, 3}, {216, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 8, 4, 74, 54}, {127872, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 8, 4, 74, 54}, {127872, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2f22e00000
MIOpen(HIP): 	wDesc = {512, 8, 3, 3, 3}, {216, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2f22e3e800
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2f21200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 8
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f2f21950000
MIOpen(HIP): 	workSpaceSize = 3234816
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe53d413c0
MIOpen(HIP): 	xDesc = {1, 8, 4, 74, 54}, {127872, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2f22e00000
MIOpen(HIP): 	wDesc = {512, 8, 3, 3, 3}, {216, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2f22e3e800
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe53d413c8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2f21200000
MIOpen(HIP): 	workSpace = 0x7f2f21950000
MIOpen(HIP): 	workSpaceSize = 3234816
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 8, 3, 3, 3}, {216, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 4, 74, 54}, {127872, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 4 74 54 }
MIOpen(HIP): 	stride.values = { 127872 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 8 3 3 3 }
MIOpen(HIP): 	stride.values = { 216 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe53d41660
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe53d413c0
MIOpen(HIP): 	xDesc = {1, 8, 4, 74, 54}, {127872, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2f22e00000
MIOpen(HIP): 	wDesc = {512, 8, 3, 3, 3}, {216, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2f22e3e800
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe53d413c8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2f21950000
MIOpen(HIP): 	workSpace = 0x7f2f220a0000
MIOpen(HIP): 	workSpaceSize = 3234816
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 8, 3, 3, 3}, {216, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 4, 74, 54}, {127872, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 4 74 54 }
MIOpen(HIP): 	stride.values = { 127872 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 8 3 3 3 }
MIOpen(HIP): 	stride.values = { 216 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe53d41660
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe53d413c0
MIOpen(HIP): 	xDesc = {1, 8, 4, 74, 54}, {127872, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2f22e00000
MIOpen(HIP): 	wDesc = {512, 8, 3, 3, 3}, {216, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2f22e3e800
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe53d413c8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2f21950000
MIOpen(HIP): 	workSpace = 0x7f2f220a0000
MIOpen(HIP): 	workSpaceSize = 3234816
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 8, 3, 3, 3}, {216, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 4, 74, 54}, {127872, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 4 74 54 }
MIOpen(HIP): 	stride.values = { 127872 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 8 3 3 3 }
MIOpen(HIP): 	stride.values = { 216 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe53d41660
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe53d413c0
MIOpen(HIP): 	xDesc = {1, 8, 4, 74, 54}, {127872, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2f22e00000
MIOpen(HIP): 	wDesc = {512, 8, 3, 3, 3}, {216, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2f22e3e800
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe53d413c8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2f21950000
MIOpen(HIP): 	workSpace = 0x7f2f220a0000
MIOpen(HIP): 	workSpaceSize = 3234816
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 8, 3, 3, 3}, {216, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 4, 74, 54}, {127872, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 4 74 54 }
MIOpen(HIP): 	stride.values = { 127872 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 8 3 3 3 }
MIOpen(HIP): 	stride.values = { 216 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe53d41660
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe53d413c0
MIOpen(HIP): 	xDesc = {1, 8, 4, 74, 54}, {127872, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2f22e00000
MIOpen(HIP): 	wDesc = {512, 8, 3, 3, 3}, {216, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2f22e3e800
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe53d413c8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2f21950000
MIOpen(HIP): 	workSpace = 0x7f2f220a0000
MIOpen(HIP): 	workSpaceSize = 3234816
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 8, 3, 3, 3}, {216, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 4, 74, 54}, {127872, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 4 74 54 }
MIOpen(HIP): 	stride.values = { 127872 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 8 3 3 3 }
MIOpen(HIP): 	stride.values = { 216 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe53d41660
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe53d413c0
MIOpen(HIP): 	xDesc = {1, 8, 4, 74, 54}, {127872, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2f22e00000
MIOpen(HIP): 	wDesc = {512, 8, 3, 3, 3}, {216, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2f22e3e800
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe53d413c8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2f21950000
MIOpen(HIP): 	workSpace = 0x7f2f220a0000
MIOpen(HIP): 	workSpaceSize = 3234816
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 8, 3, 3, 3}, {216, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 4, 74, 54}, {127872, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2db00d48
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcc2ceb520
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebd12000000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebd10a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebcf0600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ebcdb600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcc2ceb280
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebd12000000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebd10a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcc2ceb288
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebcf0600000
MIOpen(HIP): 	workSpace = 0x7ebcdb600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcc2ceb520
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcc2ceb280
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebd12000000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebd10a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcc2ceb288
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebcf0d50000
MIOpen(HIP): 	workSpace = 0x7ebcdb600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcc2ceb520
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcc2ceb280
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebd12000000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebd10a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcc2ceb288
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebcf0d50000
MIOpen(HIP): 	workSpace = 0x7ebcdb600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcc2ceb520
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcc2ceb280
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebd12000000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebd10a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcc2ceb288
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebcf0d50000
MIOpen(HIP): 	workSpace = 0x7ebcdb600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcc2ceb520
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcc2ceb280
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebd12000000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebd10a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcc2ceb288
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebcf0d50000
MIOpen(HIP): 	workSpace = 0x7ebcdb600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcc2ceb520
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcc2ceb280
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebd12000000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebd10a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcc2ceb288
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebcf0d50000
MIOpen(HIP): 	workSpace = 0x7ebcdb600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1eea29c8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffd9dc8d80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb541400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb520c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb51f600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7fb50ac00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffd9dc8ae0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb541400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb520c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffd9dc8ae8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb51f600000
MIOpen(HIP): 	workSpace = 0x7fb50ac00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffd9dc8d80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffd9dc8ae0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb541400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb520c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffd9dc8ae8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb51fd50000
MIOpen(HIP): 	workSpace = 0x7fb50ac00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffd9dc8d80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffd9dc8ae0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb541400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb520c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffd9dc8ae8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb51fd50000
MIOpen(HIP): 	workSpace = 0x7fb50ac00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffd9dc8d80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffd9dc8ae0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb541400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb520c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffd9dc8ae8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb51fd50000
MIOpen(HIP): 	workSpace = 0x7fb50ac00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffd9dc8d80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffd9dc8ae0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb541400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb520c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffd9dc8ae8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb51fd50000
MIOpen(HIP): 	workSpace = 0x7fb50ac00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffd9dc8d80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffd9dc8ae0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb541400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb520c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffd9dc8ae8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb51fd50000
MIOpen(HIP): 	workSpace = 0x7fb50ac00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a1e0358
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd4cccd850
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fadfa600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fadf9600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fadd8600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7fadc3c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd4cccd5b0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fadfa600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fadf9600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd4cccd5b8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fadd8600000
MIOpen(HIP): 	workSpace = 0x7fadc3c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd4cccd850
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd4cccd5b0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fadfa600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fadf9600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd4cccd5b8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fadd8d50000
MIOpen(HIP): 	workSpace = 0x7fadc3c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd4cccd850
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd4cccd5b0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fadfa600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fadf9600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd4cccd5b8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fadd8d50000
MIOpen(HIP): 	workSpace = 0x7fadc3c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd4cccd850
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd4cccd5b0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fadfa600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fadf9600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd4cccd5b8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fadd8d50000
MIOpen(HIP): 	workSpace = 0x7fadc3c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd4cccd850
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd4cccd5b0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fadfa600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fadf9600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd4cccd5b8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fadd8d50000
MIOpen(HIP): 	workSpace = 0x7fadc3c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd4cccd850
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd4cccd5b0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fadfa600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fadf9600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd4cccd5b8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fadd8d50000
MIOpen(HIP): 	workSpace = 0x7fadc3c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5203e648
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff96739130
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fc4f9c00000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa4d4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa4d3600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7fa4bec00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff96738e90
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fc4f9c00000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa4d4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff96738e98
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa4d3600000
MIOpen(HIP): 	workSpace = 0x7fa4bec00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff96739130
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff96738e90
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fc4f9c00000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa4d4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff96738e98
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa4d3d50000
MIOpen(HIP): 	workSpace = 0x7fa4bec00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff96739130
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff96738e90
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fc4f9c00000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa4d4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff96738e98
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa4d3d50000
MIOpen(HIP): 	workSpace = 0x7fa4bec00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff96739130
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff96738e90
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fc4f9c00000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa4d4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff96738e98
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa4d3d50000
MIOpen(HIP): 	workSpace = 0x7fa4bec00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff96739130
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff96738e90
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fc4f9c00000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa4d4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff96738e98
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa4d3d50000
MIOpen(HIP): 	workSpace = 0x7fa4bec00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff96739130
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff96738e90
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fc4f9c00000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa4d4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff96738e98
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa4d3d50000
MIOpen(HIP): 	workSpace = 0x7fa4bec00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3a8560e8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd2930ac90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb7d2800000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb7d1800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb7d0200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7fb79d200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd2930a9f0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb7d2800000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb7d1800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd2930a9f8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb7d0200000
MIOpen(HIP): 	workSpace = 0x7fb79d200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd2930ac90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd2930a9f0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb7d2800000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb7d1800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd2930a9f8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb7d0950000
MIOpen(HIP): 	workSpace = 0x7fb79d200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd2930ac90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd2930a9f0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb7d2800000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb7d1800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd2930a9f8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb7d0950000
MIOpen(HIP): 	workSpace = 0x7fb79d200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd2930ac90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd2930a9f0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb7d2800000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb7d1800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd2930a9f8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb7d0950000
MIOpen(HIP): 	workSpace = 0x7fb79d200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd2930ac90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd2930a9f0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb7d2800000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb7d1800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd2930a9f8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb7d0950000
MIOpen(HIP): 	workSpace = 0x7fb79d200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd2930ac90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd2930a9f0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb7d2800000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb7d1800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd2930a9f8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb7d0950000
MIOpen(HIP): 	workSpace = 0x7fb79d200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x18b50288
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc5899b700
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed7ce400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed7cd000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed7ac600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ed797c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc5899b460
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed7ce400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed7cd000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc5899b468
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed7ac600000
MIOpen(HIP): 	workSpace = 0x7ed797c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc5899b700
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc5899b460
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed7ce400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed7cd000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc5899b468
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed7acd50000
MIOpen(HIP): 	workSpace = 0x7ed797c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc5899b700
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc5899b460
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed7ce400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed7cd000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc5899b468
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed7acd50000
MIOpen(HIP): 	workSpace = 0x7ed797c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc5899b700
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc5899b460
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed7ce400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed7cd000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc5899b468
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed7acd50000
MIOpen(HIP): 	workSpace = 0x7ed797c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc5899b700
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc5899b460
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed7ce400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed7cd000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc5899b468
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed7acd50000
MIOpen(HIP): 	workSpace = 0x7ed797c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc5899b700
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc5899b460
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed7ce400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed7cd000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc5899b468
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed7acd50000
MIOpen(HIP): 	workSpace = 0x7ed797c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x47685658
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff2efdd950
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5102000000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f30dcc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f30db600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f30c6c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff2efdd6b0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5102000000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f30dcc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff2efdd6b8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f30db600000
MIOpen(HIP): 	workSpace = 0x7f30c6c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff2efdd950
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff2efdd6b0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5102000000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f30dcc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff2efdd6b8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f30dbd50000
MIOpen(HIP): 	workSpace = 0x7f30c6c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff2efdd950
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff2efdd6b0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5102000000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f30dcc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff2efdd6b8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f30dbd50000
MIOpen(HIP): 	workSpace = 0x7f30c6c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff2efdd950
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff2efdd6b0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5102000000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f30dcc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff2efdd6b8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f30dbd50000
MIOpen(HIP): 	workSpace = 0x7f30c6c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff2efdd950
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff2efdd6b0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5102000000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f30dcc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff2efdd6b8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f30dbd50000
MIOpen(HIP): 	workSpace = 0x7f30c6c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff2efdd950
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff2efdd6b0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5102000000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f30dcc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff2efdd6b8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f30dbd50000
MIOpen(HIP): 	workSpace = 0x7f30c6c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x32138488
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff5dbd1d50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f9dc6600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9dc5000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9da4600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f9d8fc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff5dbd1ab0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f9dc6600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9dc5000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff5dbd1ab8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9da4600000
MIOpen(HIP): 	workSpace = 0x7f9d8fc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff5dbd1d50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff5dbd1ab0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f9dc6600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9dc5000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff5dbd1ab8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9da4d50000
MIOpen(HIP): 	workSpace = 0x7f9d8fc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff5dbd1d50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff5dbd1ab0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f9dc6600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9dc5000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff5dbd1ab8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9da4d50000
MIOpen(HIP): 	workSpace = 0x7f9d8fc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff5dbd1d50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff5dbd1ab0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f9dc6600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9dc5000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff5dbd1ab8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9da4d50000
MIOpen(HIP): 	workSpace = 0x7f9d8fc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff5dbd1d50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff5dbd1ab0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f9dc6600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9dc5000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff5dbd1ab8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9da4d50000
MIOpen(HIP): 	workSpace = 0x7f9d8fc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff5dbd1d50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff5dbd1ab0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f9dc6600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9dc5000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff5dbd1ab8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9da4d50000
MIOpen(HIP): 	workSpace = 0x7f9d8fc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1ad590b8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc1ef3d280
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5698400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3e8e600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3e8cc00000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f3e59200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc1ef3cfe0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5698400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3e8e600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc1ef3cfe8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3e8cc00000
MIOpen(HIP): 	workSpace = 0x7f3e59200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc1ef3d280
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc1ef3cfe0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5698400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3e8e600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc1ef3cfe8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3e8d350000
MIOpen(HIP): 	workSpace = 0x7f3e59200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc1ef3d280
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc1ef3cfe0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5698400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3e8e600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc1ef3cfe8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3e8d350000
MIOpen(HIP): 	workSpace = 0x7f3e59200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc1ef3d280
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc1ef3cfe0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5698400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3e8e600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc1ef3cfe8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3e8d350000
MIOpen(HIP): 	workSpace = 0x7f3e59200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc1ef3d280
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc1ef3cfe0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5698400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3e8e600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc1ef3cfe8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3e8d350000
MIOpen(HIP): 	workSpace = 0x7f3e59200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc1ef3d280
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc1ef3cfe0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5698400000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3e8e600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc1ef3cfe8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3e8d350000
MIOpen(HIP): 	workSpace = 0x7f3e59200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3d0024b8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc66ce1980
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f98d4200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f80ca400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f80c8a00000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f8095200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc66ce16e0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f98d4200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f80ca400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc66ce16e8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f80c8a00000
MIOpen(HIP): 	workSpace = 0x7f8095200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc66ce1980
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc66ce16e0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f98d4200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f80ca400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc66ce16e8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f80c9150000
MIOpen(HIP): 	workSpace = 0x7f8095200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc66ce1980
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc66ce16e0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f98d4200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f80ca400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc66ce16e8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f80c9150000
MIOpen(HIP): 	workSpace = 0x7f8095200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc66ce1980
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc66ce16e0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f98d4200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f80ca400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc66ce16e8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f80c9150000
MIOpen(HIP): 	workSpace = 0x7f8095200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc66ce1980
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc66ce16e0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f98d4200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f80ca400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc66ce16e8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f80c9150000
MIOpen(HIP): 	workSpace = 0x7f8095200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc66ce1980
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc66ce16e0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f98d4200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f80ca400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc66ce16e8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f80c9150000
MIOpen(HIP): 	workSpace = 0x7f8095200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x4fbdeec8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffff83435a0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f588e600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f588d600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f586c600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f5857c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffff8343300
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f588e600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f588d600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffff8343308
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f586c600000
MIOpen(HIP): 	workSpace = 0x7f5857c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffff83435a0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffff8343300
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f588e600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f588d600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffff8343308
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f586cd50000
MIOpen(HIP): 	workSpace = 0x7f5857c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffff83435a0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffff8343300
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f588e600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f588d600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffff8343308
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f586cd50000
MIOpen(HIP): 	workSpace = 0x7f5857c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffff83435a0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffff8343300
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f588e600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f588d600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffff8343308
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f586cd50000
MIOpen(HIP): 	workSpace = 0x7f5857c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffff83435a0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffff8343300
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f588e600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f588d600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffff8343308
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f586cd50000
MIOpen(HIP): 	workSpace = 0x7f5857c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffff83435a0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffff8343300
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f588e600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f588d600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffff8343308
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f586cd50000
MIOpen(HIP): 	workSpace = 0x7f5857c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x19f3fbe8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffecbbe61c0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6bfde00000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6bfc800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6bdc600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f6bc7600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffecbbe5f20
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6bfde00000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6bfc800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffecbbe5f28
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6bdc600000
MIOpen(HIP): 	workSpace = 0x7f6bc7600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffecbbe61c0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffecbbe5f20
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6bfde00000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6bfc800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffecbbe5f28
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6bdcd50000
MIOpen(HIP): 	workSpace = 0x7f6bc7600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffecbbe61c0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffecbbe5f20
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6bfde00000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6bfc800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffecbbe5f28
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6bdcd50000
MIOpen(HIP): 	workSpace = 0x7f6bc7600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffecbbe61c0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffecbbe5f20
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6bfde00000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6bfc800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffecbbe5f28
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6bdcd50000
MIOpen(HIP): 	workSpace = 0x7f6bc7600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffecbbe61c0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffecbbe5f20
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6bfde00000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6bfc800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffecbbe5f28
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6bdcd50000
MIOpen(HIP): 	workSpace = 0x7f6bc7600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffecbbe61c0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffecbbe5f20
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6bfde00000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6bfc800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffecbbe5f28
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6bdcd50000
MIOpen(HIP): 	workSpace = 0x7f6bc7600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2938da38
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd1a245fb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee605600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee5e4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee5e3600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ee5cec00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd1a245d10
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee605600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee5e4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd1a245d18
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee5e3600000
MIOpen(HIP): 	workSpace = 0x7ee5cec00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd1a245fb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd1a245d10
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee605600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee5e4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd1a245d18
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee5e3d50000
MIOpen(HIP): 	workSpace = 0x7ee5cec00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd1a245fb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd1a245d10
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee605600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee5e4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd1a245d18
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee5e3d50000
MIOpen(HIP): 	workSpace = 0x7ee5cec00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd1a245fb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd1a245d10
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee605600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee5e4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd1a245d18
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee5e3d50000
MIOpen(HIP): 	workSpace = 0x7ee5cec00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd1a245fb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd1a245d10
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee605600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee5e4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd1a245d18
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee5e3d50000
MIOpen(HIP): 	workSpace = 0x7ee5cec00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd1a245fb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd1a245d10
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee605600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee5e4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd1a245d18
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee5e3d50000
MIOpen(HIP): 	workSpace = 0x7ee5cec00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x50bc2178
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffee245e870
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7edf08200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7edee8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7edee6c00000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7eded1c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffee245e5d0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7edf08200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7edee8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffee245e5d8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7edee6c00000
MIOpen(HIP): 	workSpace = 0x7eded1c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffee245e870
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffee245e5d0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7edf08200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7edee8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffee245e5d8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7edee7350000
MIOpen(HIP): 	workSpace = 0x7eded1c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffee245e870
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffee245e5d0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7edf08200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7edee8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffee245e5d8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7edee7350000
MIOpen(HIP): 	workSpace = 0x7eded1c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffee245e870
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffee245e5d0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7edf08200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7edee8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffee245e5d8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7edee7350000
MIOpen(HIP): 	workSpace = 0x7eded1c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffee245e870
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffee245e5d0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7edf08200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7edee8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffee245e5d8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7edee7350000
MIOpen(HIP): 	workSpace = 0x7eded1c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffee245e870
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffee245e5d0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7edf08200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7edee8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffee245e5d8
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7edee7350000
MIOpen(HIP): 	workSpace = 0x7eded1c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x8cfafd8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff8a5f48d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebbbe200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebbbcc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebb9c600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ebb87c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff8a5f4630
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebbbe200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebbbcc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff8a5f4638
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebb9c600000
MIOpen(HIP): 	workSpace = 0x7ebb87c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff8a5f48d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff8a5f4630
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebbbe200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebbbcc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff8a5f4638
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebb9cd50000
MIOpen(HIP): 	workSpace = 0x7ebb87c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff8a5f48d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff8a5f4630
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebbbe200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebbbcc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff8a5f4638
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebb9cd50000
MIOpen(HIP): 	workSpace = 0x7ebb87c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff8a5f48d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff8a5f4630
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebbbe200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebbbcc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff8a5f4638
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebb9cd50000
MIOpen(HIP): 	workSpace = 0x7ebb87c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff8a5f48d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff8a5f4630
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebbbe200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebbbcc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff8a5f4638
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebb9cd50000
MIOpen(HIP): 	workSpace = 0x7ebb87c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff8a5f48d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff8a5f4630
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebbbe200000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebbbcc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff8a5f4638
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebb9cd50000
MIOpen(HIP): 	workSpace = 0x7ebb87c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x29606698
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdbffe3ae0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f384a600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3849600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3828600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f3813c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdbffe3840
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f384a600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3849600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdbffe3848
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3828600000
MIOpen(HIP): 	workSpace = 0x7f3813c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdbffe3ae0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdbffe3840
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f384a600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3849600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdbffe3848
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3828d50000
MIOpen(HIP): 	workSpace = 0x7f3813c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdbffe3ae0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdbffe3840
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f384a600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3849600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdbffe3848
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3828d50000
MIOpen(HIP): 	workSpace = 0x7f3813c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdbffe3ae0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdbffe3840
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f384a600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3849600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdbffe3848
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3828d50000
MIOpen(HIP): 	workSpace = 0x7f3813c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdbffe3ae0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdbffe3840
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f384a600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3849600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdbffe3848
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3828d50000
MIOpen(HIP): 	workSpace = 0x7f3813c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 512 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 2 72 52 }
MIOpen(HIP): 	stride.values = { 3833856 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdbffe3ae0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdbffe3840
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f384a600000
MIOpen(HIP): 	wDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3849600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdbffe3848
MIOpen(HIP): 	yDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3828d50000
MIOpen(HIP): 	workSpace = 0x7f3813c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 512 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {512, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 2, 72, 52}, {3833856, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2731d718
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 4096 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 4096 2 72 52 }
MIOpen(HIP): 	stride.values = { 30670848 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9029ad80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {4096, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 4096, 2, 72, 52}, {30670848, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebd7e800000
MIOpen(HIP): 	wDesc = {4096, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebd56e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 4096, 2, 72, 52}, {30670848, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebd53000000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ebd3e600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 4096 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9029aae0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebd7e800000
MIOpen(HIP): 	wDesc = {4096, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebd56e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd9029aae8
MIOpen(HIP): 	yDesc = {1, 4096, 2, 72, 52}, {30670848, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebd53000000
MIOpen(HIP): 	workSpace = 0x7ebd3e600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 4096 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {4096, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 4096, 2, 72, 52}, {30670848, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 4096 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 4096 2 72 52 }
MIOpen(HIP): 	stride.values = { 30670848 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9029ad80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9029aae0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebd7e800000
MIOpen(HIP): 	wDesc = {4096, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebd56e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd9029aae8
MIOpen(HIP): 	yDesc = {1, 4096, 2, 72, 52}, {30670848, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebd3e600000
MIOpen(HIP): 	workSpace = 0x7ebd27800000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 4096 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {4096, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 4096, 2, 72, 52}, {30670848, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 4096 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 4096 2 72 52 }
MIOpen(HIP): 	stride.values = { 30670848 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9029ad80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9029aae0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebd7e800000
MIOpen(HIP): 	wDesc = {4096, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebd56e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd9029aae8
MIOpen(HIP): 	yDesc = {1, 4096, 2, 72, 52}, {30670848, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebd27800000
MIOpen(HIP): 	workSpace = 0x7ebd3e600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 4096 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {4096, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 4096, 2, 72, 52}, {30670848, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 4096 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 4096 2 72 52 }
MIOpen(HIP): 	stride.values = { 30670848 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9029ad80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9029aae0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebd7e800000
MIOpen(HIP): 	wDesc = {4096, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebd56e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd9029aae8
MIOpen(HIP): 	yDesc = {1, 4096, 2, 72, 52}, {30670848, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebd27800000
MIOpen(HIP): 	workSpace = 0x7ebd3e600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 4096 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {4096, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 4096, 2, 72, 52}, {30670848, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 4096 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 4096 2 72 52 }
MIOpen(HIP): 	stride.values = { 30670848 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9029ad80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9029aae0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebd7e800000
MIOpen(HIP): 	wDesc = {4096, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebd56e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd9029aae8
MIOpen(HIP): 	yDesc = {1, 4096, 2, 72, 52}, {30670848, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebd27800000
MIOpen(HIP): 	workSpace = 0x7ebd3e600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 4096 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {4096, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 4096, 2, 72, 52}, {30670848, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 4 74 54 }
MIOpen(HIP): 	stride.values = { 8183808 15984 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 4096 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 4096 2 72 52 }
MIOpen(HIP): 	stride.values = { 30670848 7488 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9029ad80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9029aae0
MIOpen(HIP): 	xDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ebd7e800000
MIOpen(HIP): 	wDesc = {4096, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ebd56e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd9029aae8
MIOpen(HIP): 	yDesc = {1, 4096, 2, 72, 52}, {30670848, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ebd27800000
MIOpen(HIP): 	workSpace = 0x7ebd3e600000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 4 -H 74 -W 54 -k 4096 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {4096, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 4096, 2, 72, 52}, {30670848, 7488, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 4, 74, 54}, {8183808, 15984, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x32c629c8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 5 146 106 }
MIOpen(HIP): 	stride.values = { 39618560 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd78681230
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1ecf200000
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1ed9800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1eb3600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f1e61000000
MIOpen(HIP): 	workSpaceSize = 1242169344
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd78680f90
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1ecf200000
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1ed9800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd78680f98
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1eb3600000
MIOpen(HIP): 	workSpace = 0x7f1e61000000
MIOpen(HIP): 	workSpaceSize = 1242169344
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 5 146 106 }
MIOpen(HIP): 	stride.values = { 39618560 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd78681230
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd78680f90
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1ecf200000
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1ed9800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd78680f98
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1e61000000
MIOpen(HIP): 	workSpace = 0x7f1e0dc00000
MIOpen(HIP): 	workSpaceSize = 1242169344
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 5 146 106 }
MIOpen(HIP): 	stride.values = { 39618560 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd78681230
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd78680f90
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1ecf200000
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1ed9800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd78680f98
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1e0dc00000
MIOpen(HIP): 	workSpace = 0x7f1e61000000
MIOpen(HIP): 	workSpaceSize = 1242169344
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 5 146 106 }
MIOpen(HIP): 	stride.values = { 39618560 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd78681230
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd78680f90
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1ecf200000
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1ed9800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd78680f98
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1e0dc00000
MIOpen(HIP): 	workSpace = 0x7f1e61000000
MIOpen(HIP): 	workSpaceSize = 1242169344
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 5 146 106 }
MIOpen(HIP): 	stride.values = { 39618560 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd78681230
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd78680f90
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1ecf200000
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1ed9800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd78680f98
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1e0dc00000
MIOpen(HIP): 	workSpace = 0x7f1e61000000
MIOpen(HIP): 	workSpaceSize = 1242169344
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 5 146 106 }
MIOpen(HIP): 	stride.values = { 39618560 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd78681230
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd78680f90
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1ecf200000
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1ed9800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd78680f98
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1e0dc00000
MIOpen(HIP): 	workSpace = 0x7f1e61000000
MIOpen(HIP): 	workSpaceSize = 1242169344
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x33d727f8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdd60afbb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb125200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb104600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb102e00000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7fb0d5800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdd60af910
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb125200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb104600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdd60af918
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb102e00000
MIOpen(HIP): 	workSpace = 0x7fb0d5800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdd60afbb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdd60af910
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb125200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb104600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdd60af918
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb0d5800000
MIOpen(HIP): 	workSpace = 0x7fb0a6c00000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdd60afbb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdd60af910
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb125200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb104600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdd60af918
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb0a6c00000
MIOpen(HIP): 	workSpace = 0x7fb0d5800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdd60afbb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdd60af910
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb125200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb104600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdd60af918
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb0a6c00000
MIOpen(HIP): 	workSpace = 0x7fb0d5800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdd60afbb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdd60af910
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb125200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb104600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdd60af918
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb0a6c00000
MIOpen(HIP): 	workSpace = 0x7fb0d5800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdd60afbb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdd60af910
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb125200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb104600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdd60af918
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb0a6c00000
MIOpen(HIP): 	workSpace = 0x7fb0d5800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x21750098
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 5 146 106 }
MIOpen(HIP): 	stride.values = { 39618560 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdc9e66fe0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2157200000
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2160800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f213b600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 512
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f20e8a00000
MIOpen(HIP): 	workSpaceSize = 1242169344
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdc9e66d40
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2157200000
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2160800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdc9e66d48
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f213b600000
MIOpen(HIP): 	workSpace = 0x7f20e8a00000
MIOpen(HIP): 	workSpaceSize = 1242169344
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 5 146 106 }
MIOpen(HIP): 	stride.values = { 39618560 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdc9e66fe0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdc9e66d40
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2157200000
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2160800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdc9e66d48
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f20e8a00000
MIOpen(HIP): 	workSpace = 0x7f2095c00000
MIOpen(HIP): 	workSpaceSize = 1242169344
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 5 146 106 }
MIOpen(HIP): 	stride.values = { 39618560 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdc9e66fe0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdc9e66d40
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2157200000
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2160800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdc9e66d48
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2095c00000
MIOpen(HIP): 	workSpace = 0x7f20e8a00000
MIOpen(HIP): 	workSpaceSize = 1242169344
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 5 146 106 }
MIOpen(HIP): 	stride.values = { 39618560 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdc9e66fe0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdc9e66d40
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2157200000
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2160800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdc9e66d48
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2095c00000
MIOpen(HIP): 	workSpace = 0x7f20e8a00000
MIOpen(HIP): 	workSpaceSize = 1242169344
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 5 146 106 }
MIOpen(HIP): 	stride.values = { 39618560 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdc9e66fe0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdc9e66d40
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2157200000
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2160800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdc9e66d48
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2095c00000
MIOpen(HIP): 	workSpace = 0x7f20e8a00000
MIOpen(HIP): 	workSpaceSize = 1242169344
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 512 5 146 106 }
MIOpen(HIP): 	stride.values = { 39618560 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 512 3 3 3 }
MIOpen(HIP): 	stride.values = { 13824 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdc9e66fe0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdc9e66d40
MIOpen(HIP): 	xDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2157200000
MIOpen(HIP): 	wDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2160800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdc9e66d48
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2095c00000
MIOpen(HIP): 	workSpace = 0x7f20e8a00000
MIOpen(HIP): 	workSpaceSize = 1242169344
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 512 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 512, 3, 3, 3}, {13824, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 512, 5, 146, 106}, {39618560, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1ce75578
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffabbed120
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4849200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4828600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4826e00000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f47f9800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffabbece80
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4849200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4828600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffabbece88
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4826e00000
MIOpen(HIP): 	workSpace = 0x7f47f9800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffabbed120
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffabbece80
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4849200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4828600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffabbece88
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f47f9800000
MIOpen(HIP): 	workSpace = 0x7f47cac00000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffabbed120
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffabbece80
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4849200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4828600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffabbece88
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f47cac00000
MIOpen(HIP): 	workSpace = 0x7f47f9800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffabbed120
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffabbece80
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4849200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4828600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffabbece88
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f47cac00000
MIOpen(HIP): 	workSpace = 0x7f47f9800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffabbed120
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffabbece80
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4849200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4828600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffabbece88
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f47cac00000
MIOpen(HIP): 	workSpace = 0x7f47f9800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffabbed120
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffabbece80
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4849200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4828600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffabbece88
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f47cac00000
MIOpen(HIP): 	workSpace = 0x7f47f9800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2b4b50a8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcbfab4a30
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5ee8c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5ec8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5ec6e00000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f5e99200000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcbfab4790
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5ee8c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5ec8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcbfab4798
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5ec6e00000
MIOpen(HIP): 	workSpace = 0x7f5e99200000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcbfab4a30
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcbfab4790
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5ee8c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5ec8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcbfab4798
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5e99200000
MIOpen(HIP): 	workSpace = 0x7f5e6ac00000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcbfab4a30
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcbfab4790
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5ee8c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5ec8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcbfab4798
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5e6ac00000
MIOpen(HIP): 	workSpace = 0x7f5e99200000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcbfab4a30
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcbfab4790
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5ee8c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5ec8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcbfab4798
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5e6ac00000
MIOpen(HIP): 	workSpace = 0x7f5e99200000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcbfab4a30
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcbfab4790
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5ee8c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5ec8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcbfab4798
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5e6ac00000
MIOpen(HIP): 	workSpace = 0x7f5e99200000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcbfab4a30
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcbfab4790
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5ee8c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5ec8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcbfab4798
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5e6ac00000
MIOpen(HIP): 	workSpace = 0x7f5e99200000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x53484748
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe533b580
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6dd9200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6db8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6db6e00000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f6d89800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe533b2e0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6dd9200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6db8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe533b2e8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6db6e00000
MIOpen(HIP): 	workSpace = 0x7f6d89800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe533b580
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe533b2e0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6dd9200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6db8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe533b2e8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6d89800000
MIOpen(HIP): 	workSpace = 0x7f6d5ac00000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe533b580
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe533b2e0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6dd9200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6db8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe533b2e8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6d5ac00000
MIOpen(HIP): 	workSpace = 0x7f6d89800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe533b580
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe533b2e0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6dd9200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6db8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe533b2e8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6d5ac00000
MIOpen(HIP): 	workSpace = 0x7f6d89800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe533b580
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe533b2e0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6dd9200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6db8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe533b2e8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6d5ac00000
MIOpen(HIP): 	workSpace = 0x7f6d89800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe533b580
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe533b2e0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6dd9200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6db8600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe533b2e8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6d5ac00000
MIOpen(HIP): 	workSpace = 0x7f6d89800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2fe19708
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc68e35a80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed1a8a00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed188600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed186e00000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ed159800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc68e357e0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed1a8a00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed188600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc68e357e8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed186e00000
MIOpen(HIP): 	workSpace = 0x7ed159800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc68e35a80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc68e357e0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed1a8a00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed188600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc68e357e8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed159800000
MIOpen(HIP): 	workSpace = 0x7ed12ac00000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc68e35a80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc68e357e0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed1a8a00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed188600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc68e357e8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed12ac00000
MIOpen(HIP): 	workSpace = 0x7ed159800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc68e35a80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc68e357e0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed1a8a00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed188600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc68e357e8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed12ac00000
MIOpen(HIP): 	workSpace = 0x7ed159800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc68e35a80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc68e357e0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed1a8a00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed188600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc68e357e8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed12ac00000
MIOpen(HIP): 	workSpace = 0x7ed159800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc68e35a80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc68e357e0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed1a8a00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed188600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc68e357e8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed12ac00000
MIOpen(HIP): 	workSpace = 0x7ed159800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x270993d8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1ed1a870
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6c4d200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6c2c600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6c2ae00000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f6bfd800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1ed1a5d0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6c4d200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6c2c600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe1ed1a5d8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6c2ae00000
MIOpen(HIP): 	workSpace = 0x7f6bfd800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1ed1a870
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1ed1a5d0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6c4d200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6c2c600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe1ed1a5d8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6bfd800000
MIOpen(HIP): 	workSpace = 0x7f6bcec00000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1ed1a870
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1ed1a5d0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6c4d200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6c2c600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe1ed1a5d8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6bcec00000
MIOpen(HIP): 	workSpace = 0x7f6bfd800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1ed1a870
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1ed1a5d0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6c4d200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6c2c600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe1ed1a5d8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6bcec00000
MIOpen(HIP): 	workSpace = 0x7f6bfd800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1ed1a870
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1ed1a5d0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6c4d200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6c2c600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe1ed1a5d8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6bcec00000
MIOpen(HIP): 	workSpace = 0x7f6bfd800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1ed1a870
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1ed1a5d0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6c4d200000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6c2c600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe1ed1a5d8
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6bcec00000
MIOpen(HIP): 	workSpace = 0x7f6bfd800000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x45932cc8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc1dc62ed0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4d55800000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4d5c200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4d39800000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f4d0bc00000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc1dc62c30
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4d55800000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4d5c200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc1dc62c38
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4d39800000
MIOpen(HIP): 	workSpace = 0x7f4d0bc00000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc1dc62ed0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc1dc62c30
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4d55800000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4d5c200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc1dc62c38
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4d0bc00000
MIOpen(HIP): 	workSpace = 0x7f4cdac00000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc1dc62ed0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc1dc62c30
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4d55800000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4d5c200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc1dc62c38
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4cdac00000
MIOpen(HIP): 	workSpace = 0x7f4d0bc00000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc1dc62ed0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc1dc62c30
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4d55800000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4d5c200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc1dc62c38
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4cdac00000
MIOpen(HIP): 	workSpace = 0x7f4d0bc00000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc1dc62ed0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc1dc62c30
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4d55800000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4d5c200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc1dc62c38
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4cdac00000
MIOpen(HIP): 	workSpace = 0x7f4d0bc00000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 3 144 104 }
MIOpen(HIP): 	stride.values = { 11501568 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc1dc62ed0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc1dc62c30
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4d55800000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4d5c200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc1dc62c38
MIOpen(HIP): 	yDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4cdac00000
MIOpen(HIP): 	workSpace = 0x7f4d0bc00000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 3, 144, 104}, {11501568, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2447c1c8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 2048 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 2048 3 144 104 }
MIOpen(HIP): 	stride.values = { 92012544 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcc69f1540
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {2048, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 2048, 3, 144, 104}, {92012544, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7378200000
MIOpen(HIP): 	wDesc = {2048, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7357800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 2048, 3, 144, 104}, {92012544, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f734c200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f731e600000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 2048 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcc69f12a0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7378200000
MIOpen(HIP): 	wDesc = {2048, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7357800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcc69f12a8
MIOpen(HIP): 	yDesc = {1, 2048, 3, 144, 104}, {92012544, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f734c200000
MIOpen(HIP): 	workSpace = 0x7f731e600000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 2048 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {2048, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 2048, 3, 144, 104}, {92012544, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 2048 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 2048 3 144 104 }
MIOpen(HIP): 	stride.values = { 92012544 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcc69f1540
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcc69f12a0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7378200000
MIOpen(HIP): 	wDesc = {2048, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7357800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcc69f12a8
MIOpen(HIP): 	yDesc = {1, 2048, 3, 144, 104}, {92012544, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f731e600000
MIOpen(HIP): 	workSpace = 0x7f72eec00000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 2048 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {2048, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 2048, 3, 144, 104}, {92012544, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 2048 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 2048 3 144 104 }
MIOpen(HIP): 	stride.values = { 92012544 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcc69f1540
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcc69f12a0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7378200000
MIOpen(HIP): 	wDesc = {2048, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7357800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcc69f12a8
MIOpen(HIP): 	yDesc = {1, 2048, 3, 144, 104}, {92012544, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f72eec00000
MIOpen(HIP): 	workSpace = 0x7f731e600000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 2048 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {2048, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 2048, 3, 144, 104}, {92012544, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 2048 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 2048 3 144 104 }
MIOpen(HIP): 	stride.values = { 92012544 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcc69f1540
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcc69f12a0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7378200000
MIOpen(HIP): 	wDesc = {2048, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7357800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcc69f12a8
MIOpen(HIP): 	yDesc = {1, 2048, 3, 144, 104}, {92012544, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f72eec00000
MIOpen(HIP): 	workSpace = 0x7f731e600000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 2048 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {2048, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 2048, 3, 144, 104}, {92012544, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 2048 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 2048 3 144 104 }
MIOpen(HIP): 	stride.values = { 92012544 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcc69f1540
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcc69f12a0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7378200000
MIOpen(HIP): 	wDesc = {2048, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7357800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcc69f12a8
MIOpen(HIP): 	yDesc = {1, 2048, 3, 144, 104}, {92012544, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f72eec00000
MIOpen(HIP): 	workSpace = 0x7f731e600000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 2048 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {2048, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 2048, 3, 144, 104}, {92012544, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 146 106 }
MIOpen(HIP): 	stride.values = { 19809280 77380 15476 106 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6a00003c74
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 2048 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 2048 3 144 104 }
MIOpen(HIP): 	stride.values = { 92012544 44928 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcc69f1540
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcc69f12a0
MIOpen(HIP): 	xDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7378200000
MIOpen(HIP): 	wDesc = {2048, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7357800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcc69f12a8
MIOpen(HIP): 	yDesc = {1, 2048, 3, 144, 104}, {92012544, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7f72eec00000
MIOpen(HIP): 	workSpace = 0x7f731e600000
MIOpen(HIP): 	workSpaceSize = 621084672
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 5 -H 146 -W 106 -k 2048 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {2048, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 2048, 3, 144, 104}, {92012544, 44928, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 146, 106}, {19809280, 77380, 15476, 106, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x51e68c18
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe04663cb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f84cac00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f84de400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f84a7200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f83a8000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe04663a10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f84cac00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f84de400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe04663a18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f84a7200000
MIOpen(HIP): 	workSpace = 0x7f83a8000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe04663cb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe04663a10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f84cac00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f84de400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe04663a18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f83a8000000
MIOpen(HIP): 	workSpace = 0x7f82a5000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe04663cb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe04663a10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f84cac00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f84de400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe04663a18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f82a5000000
MIOpen(HIP): 	workSpace = 0x7f83a8000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe04663cb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe04663a10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f84cac00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f84de400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe04663a18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f82a5000000
MIOpen(HIP): 	workSpace = 0x7f83a8000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe04663cb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe04663a10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f84cac00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f84de400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe04663a18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f82a5000000
MIOpen(HIP): 	workSpace = 0x7f83a8000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe04663cb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe04663a10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f84cac00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f84de400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe04663a18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f82a5000000
MIOpen(HIP): 	workSpace = 0x7f83a8000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x342ac858
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff21e14d80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f788ec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f78a2200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f786b200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f776c000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff21e14ae0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f788ec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f78a2200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff21e14ae8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f786b200000
MIOpen(HIP): 	workSpace = 0x7f776c000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff21e14d80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff21e14ae0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f788ec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f78a2200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff21e14ae8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f776c000000
MIOpen(HIP): 	workSpace = 0x7f7669000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff21e14d80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff21e14ae0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f788ec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f78a2200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff21e14ae8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7669000000
MIOpen(HIP): 	workSpace = 0x7f776c000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff21e14d80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff21e14ae0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f788ec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f78a2200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff21e14ae8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7669000000
MIOpen(HIP): 	workSpace = 0x7f776c000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff21e14d80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff21e14ae0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f788ec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f78a2200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff21e14ae8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7669000000
MIOpen(HIP): 	workSpace = 0x7f776c000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff21e14d80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff21e14ae0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f788ec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f78a2200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff21e14ae8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7669000000
MIOpen(HIP): 	workSpace = 0x7f776c000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x54f7a898
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcf42df050
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b86c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b9a400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b63200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f1a64000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcf42dedb0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b86c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b9a400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcf42dedb8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b63200000
MIOpen(HIP): 	workSpace = 0x7f1a64000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcf42df050
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcf42dedb0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b86c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b9a400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcf42dedb8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1a64000000
MIOpen(HIP): 	workSpace = 0x7f1961000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcf42df050
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcf42dedb0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b86c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b9a400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcf42dedb8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1961000000
MIOpen(HIP): 	workSpace = 0x7f1a64000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcf42df050
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcf42dedb0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b86c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b9a400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcf42dedb8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1961000000
MIOpen(HIP): 	workSpace = 0x7f1a64000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcf42df050
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcf42dedb0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b86c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b9a400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcf42dedb8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1961000000
MIOpen(HIP): 	workSpace = 0x7f1a64000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcf42df050
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcf42dedb0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b86c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b9a400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcf42dedb8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1961000000
MIOpen(HIP): 	workSpace = 0x7f1a64000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x7c33d98
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc066895d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb3dec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fd3fc200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb3bb200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7fb2bc000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc06689330
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb3dec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fd3fc200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc06689338
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb3bb200000
MIOpen(HIP): 	workSpace = 0x7fb2bc000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc066895d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc06689330
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb3dec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fd3fc200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc06689338
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb2bc000000
MIOpen(HIP): 	workSpace = 0x7fb1b9000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc066895d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc06689330
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb3dec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fd3fc200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc06689338
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb1b9000000
MIOpen(HIP): 	workSpace = 0x7fb2bc000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc066895d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc06689330
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb3dec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fd3fc200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc06689338
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb1b9000000
MIOpen(HIP): 	workSpace = 0x7fb2bc000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc066895d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc06689330
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb3dec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fd3fc200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc06689338
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb1b9000000
MIOpen(HIP): 	workSpace = 0x7fb2bc000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc066895d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc06689330
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb3dec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fd3fc200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc06689338
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb1b9000000
MIOpen(HIP): 	workSpace = 0x7fb2bc000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x40fd5588
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeded946d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f28d6c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f28ea000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f28b3200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f27b4000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeded94430
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f28d6c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f28ea000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffeded94438
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f28b3200000
MIOpen(HIP): 	workSpace = 0x7f27b4000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeded946d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeded94430
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f28d6c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f28ea000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffeded94438
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f27b4000000
MIOpen(HIP): 	workSpace = 0x7f26b1000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeded946d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeded94430
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f28d6c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f28ea000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffeded94438
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f26b1000000
MIOpen(HIP): 	workSpace = 0x7f27b4000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeded946d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeded94430
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f28d6c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f28ea000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffeded94438
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f26b1000000
MIOpen(HIP): 	workSpace = 0x7f27b4000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeded946d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeded94430
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f28d6c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f28ea000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffeded94438
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f26b1000000
MIOpen(HIP): 	workSpace = 0x7f27b4000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeded946d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeded94430
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f28d6c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f28ea000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffeded94438
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f26b1000000
MIOpen(HIP): 	workSpace = 0x7f27b4000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x4f5f0248
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffec6c2deb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f34fec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3511a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f34db200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f33dc000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffec6c2dc10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f34fec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3511a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffec6c2dc18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f34db200000
MIOpen(HIP): 	workSpace = 0x7f33dc000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffec6c2deb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffec6c2dc10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f34fec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3511a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffec6c2dc18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f33dc000000
MIOpen(HIP): 	workSpace = 0x7f32d9000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffec6c2deb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffec6c2dc10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f34fec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3511a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffec6c2dc18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f32d9000000
MIOpen(HIP): 	workSpace = 0x7f33dc000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffec6c2deb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffec6c2dc10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f34fec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3511a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffec6c2dc18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f32d9000000
MIOpen(HIP): 	workSpace = 0x7f33dc000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffec6c2deb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffec6c2dc10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f34fec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3511a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffec6c2dc18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f32d9000000
MIOpen(HIP): 	workSpace = 0x7f33dc000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffec6c2deb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffec6c2dc10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f34fec00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3511a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffec6c2dc18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f32d9000000
MIOpen(HIP): 	workSpace = 0x7f33dc000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x416b7a68
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffecb34cb80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f91bac00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f91ce400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9197200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f9098000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffecb34c8e0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f91bac00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f91ce400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffecb34c8e8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9197200000
MIOpen(HIP): 	workSpace = 0x7f9098000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffecb34cb80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffecb34c8e0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f91bac00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f91ce400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffecb34c8e8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9098000000
MIOpen(HIP): 	workSpace = 0x7f8f95000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffecb34cb80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffecb34c8e0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f91bac00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f91ce400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffecb34c8e8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f8f95000000
MIOpen(HIP): 	workSpace = 0x7f9098000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffecb34cb80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffecb34c8e0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f91bac00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f91ce400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffecb34c8e8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f8f95000000
MIOpen(HIP): 	workSpace = 0x7f9098000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffecb34cb80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffecb34c8e0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f91bac00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f91ce400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffecb34c8e8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f8f95000000
MIOpen(HIP): 	workSpace = 0x7f9098000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffecb34cb80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffecb34c8e0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f91bac00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f91ce400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffecb34c8e8
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f8f95000000
MIOpen(HIP): 	workSpace = 0x7f9098000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1c74dec8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd58c40eb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6786c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6799a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6763200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f6664000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd58c40c10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6786c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6799a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd58c40c18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6763200000
MIOpen(HIP): 	workSpace = 0x7f6664000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd58c40eb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd58c40c10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6786c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6799a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd58c40c18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6664000000
MIOpen(HIP): 	workSpace = 0x7f6561000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd58c40eb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd58c40c10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6786c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6799a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd58c40c18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6561000000
MIOpen(HIP): 	workSpace = 0x7f6664000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd58c40eb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd58c40c10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6786c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6799a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd58c40c18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6561000000
MIOpen(HIP): 	workSpace = 0x7f6664000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd58c40eb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd58c40c10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6786c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6799a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd58c40c18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6561000000
MIOpen(HIP): 	workSpace = 0x7f6664000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 256 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 5 288 208 }
MIOpen(HIP): 	stride.values = { 76677120 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd58c40eb0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd58c40c10
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6786c00000
MIOpen(HIP): 	wDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6799a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd58c40c18
MIOpen(HIP): 	yDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6561000000
MIOpen(HIP): 	workSpace = 0x7f6664000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 256 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {256, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 5, 288, 208}, {76677120, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x343c38b8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1024 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 1024 5 288 208 }
MIOpen(HIP): 	stride.values = { 306708480 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffab0c7b10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {1024, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 1024, 5, 288, 208}, {306708480, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6676c00000
MIOpen(HIP): 	wDesc = {1024, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6688600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 1024, 5, 288, 208}, {306708480, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6637c00000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f6538400000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 1024 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffab0c7870
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6676c00000
MIOpen(HIP): 	wDesc = {1024, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6688600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffab0c7878
MIOpen(HIP): 	yDesc = {1, 1024, 5, 288, 208}, {306708480, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6637c00000
MIOpen(HIP): 	workSpace = 0x7f6538400000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 1024 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1024, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 1024, 5, 288, 208}, {306708480, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1024 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 1024 5 288 208 }
MIOpen(HIP): 	stride.values = { 306708480 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffab0c7b10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffab0c7870
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6676c00000
MIOpen(HIP): 	wDesc = {1024, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6688600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffab0c7878
MIOpen(HIP): 	yDesc = {1, 1024, 5, 288, 208}, {306708480, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6538400000
MIOpen(HIP): 	workSpace = 0x7f6439000000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 1024 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1024, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 1024, 5, 288, 208}, {306708480, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1024 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 1024 5 288 208 }
MIOpen(HIP): 	stride.values = { 306708480 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffab0c7b10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffab0c7870
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6676c00000
MIOpen(HIP): 	wDesc = {1024, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6688600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffab0c7878
MIOpen(HIP): 	yDesc = {1, 1024, 5, 288, 208}, {306708480, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6439000000
MIOpen(HIP): 	workSpace = 0x7f6538400000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 1024 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1024, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 1024, 5, 288, 208}, {306708480, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1024 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 1024 5 288 208 }
MIOpen(HIP): 	stride.values = { 306708480 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffab0c7b10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffab0c7870
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6676c00000
MIOpen(HIP): 	wDesc = {1024, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6688600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffab0c7878
MIOpen(HIP): 	yDesc = {1, 1024, 5, 288, 208}, {306708480, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6439000000
MIOpen(HIP): 	workSpace = 0x7f6538400000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 1024 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1024, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 1024, 5, 288, 208}, {306708480, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1024 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 1024 5 288 208 }
MIOpen(HIP): 	stride.values = { 306708480 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffab0c7b10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffab0c7870
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6676c00000
MIOpen(HIP): 	wDesc = {1024, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6688600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffab0c7878
MIOpen(HIP): 	yDesc = {1, 1024, 5, 288, 208}, {306708480, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6439000000
MIOpen(HIP): 	workSpace = 0x7f6538400000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 1024 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1024, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 1024, 5, 288, 208}, {306708480, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 290 210 }
MIOpen(HIP): 	stride.values = { 109132800 426300 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1024 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 1024 5 288 208 }
MIOpen(HIP): 	stride.values = { 306708480 299520 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffab0c7b10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffab0c7870
MIOpen(HIP): 	xDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6676c00000
MIOpen(HIP): 	wDesc = {1024, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6688600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffab0c7878
MIOpen(HIP): 	yDesc = {1, 1024, 5, 288, 208}, {306708480, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6439000000
MIOpen(HIP): 	workSpace = 0x7f6538400000
MIOpen(HIP): 	workSpaceSize = 4140564480
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 290 -W 210 -k 1024 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1024, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 1024, 5, 288, 208}, {306708480, 299520, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 290, 210}, {109132800, 426300, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x21dabbf8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 578 418 }
MIOpen(HIP): 	stride.values = { 432954368 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffca4074760
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f92ec400000
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9325e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f92bf800000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f9271400000
MIOpen(HIP): 	workSpaceSize = 1174386688
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffca40744c0
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f92ec400000
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9325e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffca40744c8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f92bf800000
MIOpen(HIP): 	workSpace = 0x7f9271400000
MIOpen(HIP): 	workSpaceSize = 1174386688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 578 418 }
MIOpen(HIP): 	stride.values = { 432954368 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffca4074760
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffca40744c0
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f92ec400000
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9325e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffca40744c8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9271400000
MIOpen(HIP): 	workSpace = 0x7f922b200000
MIOpen(HIP): 	workSpaceSize = 1174386688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 578 418 }
MIOpen(HIP): 	stride.values = { 432954368 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffca4074760
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffca40744c0
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f92ec400000
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9325e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffca40744c8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f922b200000
MIOpen(HIP): 	workSpace = 0x7f9271400000
MIOpen(HIP): 	workSpaceSize = 1174386688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 578 418 }
MIOpen(HIP): 	stride.values = { 432954368 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffca4074760
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffca40744c0
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f92ec400000
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9325e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffca40744c8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f922b200000
MIOpen(HIP): 	workSpace = 0x7f9271400000
MIOpen(HIP): 	workSpaceSize = 1174386688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 578 418 }
MIOpen(HIP): 	stride.values = { 432954368 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffca4074760
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffca40744c0
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f92ec400000
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9325e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffca40744c8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f922b200000
MIOpen(HIP): 	workSpace = 0x7f9271400000
MIOpen(HIP): 	workSpaceSize = 1174386688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 578 418 }
MIOpen(HIP): 	stride.values = { 432954368 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffca4074760
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffca40744c0
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f92ec400000
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9325e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffca40744c8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f922b200000
MIOpen(HIP): 	workSpace = 0x7f9271400000
MIOpen(HIP): 	workSpaceSize = 1174386688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3e8ccfd8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc9e4e8dd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed78a000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed7aa400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed75d400000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ed728c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc9e4e8b30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed78a000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed7aa400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc9e4e8b38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed75d400000
MIOpen(HIP): 	workSpace = 0x7ed728c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc9e4e8dd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc9e4e8b30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed78a000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed7aa400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc9e4e8b38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed728c00000
MIOpen(HIP): 	workSpace = 0x7ed6fc600000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc9e4e8dd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc9e4e8b30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed78a000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed7aa400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc9e4e8b38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed6fc600000
MIOpen(HIP): 	workSpace = 0x7ed728c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc9e4e8dd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc9e4e8b30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed78a000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed7aa400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc9e4e8b38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed6fc600000
MIOpen(HIP): 	workSpace = 0x7ed728c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc9e4e8dd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc9e4e8b30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed78a000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed7aa400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc9e4e8b38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed6fc600000
MIOpen(HIP): 	workSpace = 0x7ed728c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc9e4e8dd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc9e4e8b30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed78a000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed7aa400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc9e4e8b38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed6fc600000
MIOpen(HIP): 	workSpace = 0x7ed728c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2afd3ac8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 578 418 }
MIOpen(HIP): 	stride.values = { 432954368 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd25017150
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec264400000
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec29de00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec237800000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 256
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ec1e9400000
MIOpen(HIP): 	workSpaceSize = 1174386688
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd25016eb0
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec264400000
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec29de00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd25016eb8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec237800000
MIOpen(HIP): 	workSpace = 0x7ec1e9400000
MIOpen(HIP): 	workSpaceSize = 1174386688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 578 418 }
MIOpen(HIP): 	stride.values = { 432954368 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd25017150
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd25016eb0
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec264400000
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec29de00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd25016eb8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec1e9400000
MIOpen(HIP): 	workSpace = 0x7ec1a3200000
MIOpen(HIP): 	workSpaceSize = 1174386688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 578 418 }
MIOpen(HIP): 	stride.values = { 432954368 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd25017150
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd25016eb0
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec264400000
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec29de00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd25016eb8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec1a3200000
MIOpen(HIP): 	workSpace = 0x7ec1e9400000
MIOpen(HIP): 	workSpaceSize = 1174386688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 578 418 }
MIOpen(HIP): 	stride.values = { 432954368 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd25017150
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd25016eb0
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec264400000
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec29de00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd25016eb8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec1a3200000
MIOpen(HIP): 	workSpace = 0x7ec1e9400000
MIOpen(HIP): 	workSpaceSize = 1174386688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 578 418 }
MIOpen(HIP): 	stride.values = { 432954368 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd25017150
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd25016eb0
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec264400000
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec29de00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd25016eb8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec1a3200000
MIOpen(HIP): 	workSpace = 0x7ec1e9400000
MIOpen(HIP): 	workSpaceSize = 1174386688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 256 7 578 418 }
MIOpen(HIP): 	stride.values = { 432954368 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 256 3 3 3 }
MIOpen(HIP): 	stride.values = { 6912 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd25017150
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd25016eb0
MIOpen(HIP): 	xDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec264400000
MIOpen(HIP): 	wDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec29de00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd25016eb8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec1a3200000
MIOpen(HIP): 	workSpace = 0x7ec1e9400000
MIOpen(HIP): 	workSpaceSize = 1174386688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 256 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 256, 3, 3, 3}, {6912, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 256, 7, 578, 418}, {432954368, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x34e03328
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdebf7d270
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7eca02000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7eca21c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec9d5400000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ec9a0c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdebf7cfd0
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7eca02000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7eca21c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffdebf7cfd8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec9d5400000
MIOpen(HIP): 	workSpace = 0x7ec9a0c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdebf7d270
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdebf7cfd0
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7eca02000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7eca21c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffdebf7cfd8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec9a0c00000
MIOpen(HIP): 	workSpace = 0x7ec974600000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdebf7d270
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdebf7cfd0
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7eca02000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7eca21c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffdebf7cfd8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec974600000
MIOpen(HIP): 	workSpace = 0x7ec9a0c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdebf7d270
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdebf7cfd0
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7eca02000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7eca21c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffdebf7cfd8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec974600000
MIOpen(HIP): 	workSpace = 0x7ec9a0c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdebf7d270
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdebf7cfd0
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7eca02000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7eca21c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffdebf7cfd8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec974600000
MIOpen(HIP): 	workSpace = 0x7ec9a0c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdebf7d270
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdebf7cfd0
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7eca02000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7eca21c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffdebf7cfd8
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec974600000
MIOpen(HIP): 	workSpace = 0x7ec9a0c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2f532bb8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe7e28bcd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7facf6000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fcd20200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7facc9400000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7fac94c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe7e28ba30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7facf6000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fcd20200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe7e28ba38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7facc9400000
MIOpen(HIP): 	workSpace = 0x7fac94c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe7e28bcd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe7e28ba30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7facf6000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fcd20200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe7e28ba38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fac94c00000
MIOpen(HIP): 	workSpace = 0x7fac68600000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe7e28bcd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe7e28ba30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7facf6000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fcd20200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe7e28ba38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fac68600000
MIOpen(HIP): 	workSpace = 0x7fac94c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe7e28bcd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe7e28ba30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7facf6000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fcd20200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe7e28ba38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fac68600000
MIOpen(HIP): 	workSpace = 0x7fac94c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe7e28bcd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe7e28ba30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7facf6000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fcd20200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe7e28ba38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fac68600000
MIOpen(HIP): 	workSpace = 0x7fac94c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe7e28bcd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe7e28ba30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7facf6000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fcd20200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe7e28ba38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fac68600000
MIOpen(HIP): 	workSpace = 0x7fac94c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x54d633a8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1205d000
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f97da000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f97fb600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f97ad400000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f9778c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1205cd60
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f97da000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f97fb600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe1205cd68
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f97ad400000
MIOpen(HIP): 	workSpace = 0x7f9778c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1205d000
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1205cd60
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f97da000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f97fb600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe1205cd68
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9778c00000
MIOpen(HIP): 	workSpace = 0x7f974c600000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1205d000
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1205cd60
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f97da000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f97fb600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe1205cd68
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f974c600000
MIOpen(HIP): 	workSpace = 0x7f9778c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1205d000
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1205cd60
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f97da000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f97fb600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe1205cd68
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f974c600000
MIOpen(HIP): 	workSpace = 0x7f9778c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1205d000
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1205cd60
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f97da000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f97fb600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe1205cd68
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f974c600000
MIOpen(HIP): 	workSpace = 0x7f9778c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1205d000
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1205cd60
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f97da000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f97fb600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe1205cd68
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f974c600000
MIOpen(HIP): 	workSpace = 0x7f9778c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2a89f648
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe923890d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee6ef800000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee6d4a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee6c2200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ee68d400000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe92388e30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee6ef800000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee6d4a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe92388e38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee6c2200000
MIOpen(HIP): 	workSpace = 0x7ee68d400000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe923890d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe92388e30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee6ef800000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee6d4a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe92388e38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee68d400000
MIOpen(HIP): 	workSpace = 0x7ee660600000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe923890d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe92388e30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee6ef800000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee6d4a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe92388e38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee660600000
MIOpen(HIP): 	workSpace = 0x7ee68d400000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe923890d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe92388e30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee6ef800000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee6d4a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe92388e38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee660600000
MIOpen(HIP): 	workSpace = 0x7ee68d400000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe923890d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe92388e30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee6ef800000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee6d4a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe92388e38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee660600000
MIOpen(HIP): 	workSpace = 0x7ee68d400000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe923890d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe92388e30
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee6ef800000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee6d4a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe92388e38
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee660600000
MIOpen(HIP): 	workSpace = 0x7ee68d400000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x4b66f408
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdc98b9920
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2d1a000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4d44e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2ced400000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f2cb8c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdc98b9680
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2d1a000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4d44e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffdc98b9688
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2ced400000
MIOpen(HIP): 	workSpace = 0x7f2cb8c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdc98b9920
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdc98b9680
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2d1a000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4d44e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffdc98b9688
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2cb8c00000
MIOpen(HIP): 	workSpace = 0x7f2c8c600000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdc98b9920
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdc98b9680
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2d1a000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4d44e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffdc98b9688
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2c8c600000
MIOpen(HIP): 	workSpace = 0x7f2cb8c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdc98b9920
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdc98b9680
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2d1a000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4d44e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffdc98b9688
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2c8c600000
MIOpen(HIP): 	workSpace = 0x7f2cb8c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdc98b9920
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdc98b9680
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2d1a000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4d44e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffdc98b9688
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2c8c600000
MIOpen(HIP): 	workSpace = 0x7f2cb8c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdc98b9920
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdc98b9680
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2d1a000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4d44e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffdc98b9688
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2c8c600000
MIOpen(HIP): 	workSpace = 0x7f2cb8c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3a965568
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd4347d9c0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7eea62000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f0a8c200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7eea35400000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7eea00c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd4347d720
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7eea62000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f0a8c200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd4347d728
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7eea35400000
MIOpen(HIP): 	workSpace = 0x7eea00c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd4347d9c0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd4347d720
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7eea62000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f0a8c200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd4347d728
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7eea00c00000
MIOpen(HIP): 	workSpace = 0x7ee9d4600000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd4347d9c0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd4347d720
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7eea62000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f0a8c200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd4347d728
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee9d4600000
MIOpen(HIP): 	workSpace = 0x7eea00c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd4347d9c0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd4347d720
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7eea62000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f0a8c200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd4347d728
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee9d4600000
MIOpen(HIP): 	workSpace = 0x7eea00c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd4347d9c0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd4347d720
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7eea62000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f0a8c200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd4347d728
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee9d4600000
MIOpen(HIP): 	workSpace = 0x7eea00c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 5 576 416 }
MIOpen(HIP): 	stride.values = { 153354240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd4347d9c0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd4347d720
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7eea62000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f0a8c200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd4347d728
MIOpen(HIP): 	yDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee9d4600000
MIOpen(HIP): 	workSpace = 0x7eea00c00000
MIOpen(HIP): 	workSpaceSize = 740547584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 5, 576, 416}, {153354240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1e055328
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 3 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 3 5 576 416 }
MIOpen(HIP): 	stride.values = { 3594240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd519a65e0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {3, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 3, 5, 576, 416}, {3594240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f182a000000
MIOpen(HIP): 	wDesc = {3, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5855400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 3, 5, 576, 416}, {3594240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1849800000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f17ed400000
MIOpen(HIP): 	workSpaceSize = 440163584
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 3 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd519a6340
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f182a000000
MIOpen(HIP): 	wDesc = {3, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5855400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd519a6348
MIOpen(HIP): 	yDesc = {1, 3, 5, 576, 416}, {3594240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1849800000
MIOpen(HIP): 	workSpace = 0x7f17ed400000
MIOpen(HIP): 	workSpaceSize = 440163584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 3 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {3, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 3, 5, 576, 416}, {3594240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 3 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 3 5 576 416 }
MIOpen(HIP): 	stride.values = { 3594240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd519a65e0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd519a6340
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f182a000000
MIOpen(HIP): 	wDesc = {3, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5855400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd519a6348
MIOpen(HIP): 	yDesc = {1, 3, 5, 576, 416}, {3594240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1849edb000
MIOpen(HIP): 	workSpace = 0x7f17ed400000
MIOpen(HIP): 	workSpaceSize = 440163584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 3 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {3, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 3, 5, 576, 416}, {3594240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 3 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 3 5 576 416 }
MIOpen(HIP): 	stride.values = { 3594240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd519a65e0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd519a6340
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f182a000000
MIOpen(HIP): 	wDesc = {3, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5855400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd519a6348
MIOpen(HIP): 	yDesc = {1, 3, 5, 576, 416}, {3594240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1849edb000
MIOpen(HIP): 	workSpace = 0x7f17ed400000
MIOpen(HIP): 	workSpaceSize = 440163584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 3 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {3, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 3, 5, 576, 416}, {3594240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 3 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 3 5 576 416 }
MIOpen(HIP): 	stride.values = { 3594240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd519a65e0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd519a6340
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f182a000000
MIOpen(HIP): 	wDesc = {3, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5855400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd519a6348
MIOpen(HIP): 	yDesc = {1, 3, 5, 576, 416}, {3594240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1849edb000
MIOpen(HIP): 	workSpace = 0x7f17ed400000
MIOpen(HIP): 	workSpaceSize = 440163584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 3 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {3, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 3, 5, 576, 416}, {3594240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 3 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 3 5 576 416 }
MIOpen(HIP): 	stride.values = { 3594240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd519a65e0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd519a6340
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f182a000000
MIOpen(HIP): 	wDesc = {3, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5855400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd519a6348
MIOpen(HIP): 	yDesc = {1, 3, 5, 576, 416}, {3594240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1849edb000
MIOpen(HIP): 	workSpace = 0x7f17ed400000
MIOpen(HIP): 	workSpaceSize = 440163584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 3 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {3, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 3, 5, 576, 416}, {3594240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 7 578 418 }
MIOpen(HIP): 	stride.values = { 216477184 1691228 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 3 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 3 5 576 416 }
MIOpen(HIP): 	stride.values = { 3594240 1198080 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd519a65e0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd519a6340
MIOpen(HIP): 	xDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f182a000000
MIOpen(HIP): 	wDesc = {3, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5855400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd519a6348
MIOpen(HIP): 	yDesc = {1, 3, 5, 576, 416}, {3594240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1849edb000
MIOpen(HIP): 	workSpace = 0x7f17ed400000
MIOpen(HIP): 	workSpaceSize = 440163584
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 7 -H 578 -W 418 -k 3 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {3, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 3, 5, 576, 416}, {3594240, 1198080, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 7, 578, 418}, {216477184, 1691228, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3ff68118
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 3 3 578 418 }
MIOpen(HIP): 	stride.values = { 2174436 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 3 3 3 3 }
MIOpen(HIP): 	stride.values = { 81 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd500ce360
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {32, 3, 3, 3, 3}, {81, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 3, 3, 578, 418}, {2174436, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 3, 3, 578, 418}, {2174436, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8ded400000
MIOpen(HIP): 	wDesc = {32, 3, 3, 3, 3}, {81, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6dc9800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f8ded825c00
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 3
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f6dbe800000
MIOpen(HIP): 	workSpaceSize = 38817792
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 3 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd500ce0c0
MIOpen(HIP): 	xDesc = {1, 3, 3, 578, 418}, {2174436, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8ded400000
MIOpen(HIP): 	wDesc = {32, 3, 3, 3, 3}, {81, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6dc9800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd500ce0c8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f8ded825c00
MIOpen(HIP): 	workSpace = 0x7f6dbfa00000
MIOpen(HIP): 	workSpaceSize = 19689728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 3 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 3, 3, 3, 3}, {81, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 3, 3, 578, 418}, {2174436, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 3 3 578 418 }
MIOpen(HIP): 	stride.values = { 2174436 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 3 3 3 3 }
MIOpen(HIP): 	stride.values = { 81 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd500ce360
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd500ce0c0
MIOpen(HIP): 	xDesc = {1, 3, 3, 578, 418}, {2174436, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8ded400000
MIOpen(HIP): 	wDesc = {32, 3, 3, 3, 3}, {81, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6dc9800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd500ce0c8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6dbfa00000
MIOpen(HIP): 	workSpace = 0x7f6dbc200000
MIOpen(HIP): 	workSpaceSize = 19689728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 3 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 3, 3, 3, 3}, {81, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 3, 3, 578, 418}, {2174436, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 3 3 578 418 }
MIOpen(HIP): 	stride.values = { 2174436 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 3 3 3 3 }
MIOpen(HIP): 	stride.values = { 81 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd500ce360
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd500ce0c0
MIOpen(HIP): 	xDesc = {1, 3, 3, 578, 418}, {2174436, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8ded400000
MIOpen(HIP): 	wDesc = {32, 3, 3, 3, 3}, {81, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6dc9800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd500ce0c8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6dbc200000
MIOpen(HIP): 	workSpace = 0x7f6dbfa00000
MIOpen(HIP): 	workSpaceSize = 19689728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 3 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 3, 3, 3, 3}, {81, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 3, 3, 578, 418}, {2174436, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 3 3 578 418 }
MIOpen(HIP): 	stride.values = { 2174436 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 3 3 3 3 }
MIOpen(HIP): 	stride.values = { 81 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd500ce360
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd500ce0c0
MIOpen(HIP): 	xDesc = {1, 3, 3, 578, 418}, {2174436, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8ded400000
MIOpen(HIP): 	wDesc = {32, 3, 3, 3, 3}, {81, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6dc9800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd500ce0c8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6dbc200000
MIOpen(HIP): 	workSpace = 0x7f6dbfa00000
MIOpen(HIP): 	workSpaceSize = 19689728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 3 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 3, 3, 3, 3}, {81, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 3, 3, 578, 418}, {2174436, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 3 3 578 418 }
MIOpen(HIP): 	stride.values = { 2174436 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 3 3 3 3 }
MIOpen(HIP): 	stride.values = { 81 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd500ce360
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd500ce0c0
MIOpen(HIP): 	xDesc = {1, 3, 3, 578, 418}, {2174436, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8ded400000
MIOpen(HIP): 	wDesc = {32, 3, 3, 3, 3}, {81, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6dc9800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd500ce0c8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6dbc200000
MIOpen(HIP): 	workSpace = 0x7f6dbfa00000
MIOpen(HIP): 	workSpaceSize = 19689728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 3 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 3, 3, 3, 3}, {81, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 3, 3, 578, 418}, {2174436, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 3 3 578 418 }
MIOpen(HIP): 	stride.values = { 2174436 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 3 3 3 3 }
MIOpen(HIP): 	stride.values = { 81 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd500ce360
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd500ce0c0
MIOpen(HIP): 	xDesc = {1, 3, 3, 578, 418}, {2174436, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8ded400000
MIOpen(HIP): 	wDesc = {32, 3, 3, 3, 3}, {81, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f6dc9800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd500ce0c8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6dbc200000
MIOpen(HIP): 	workSpace = 0x7f6dbfa00000
MIOpen(HIP): 	workSpaceSize = 19689728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 3 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 3, 3, 3, 3}, {81, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 3, 3, 578, 418}, {2174436, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3b8ca218
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff02258df0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1ff1000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4004400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3ffee00000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 32
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f1fb5c00000
MIOpen(HIP): 	workSpaceSize = 414056448
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff02258b50
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1ff1000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4004400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7fff02258b58
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3ffee00000
MIOpen(HIP): 	workSpace = 0x7f1fcac00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff02258df0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff02258b50
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1ff1000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4004400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7fff02258b58
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1fcac00000
MIOpen(HIP): 	workSpace = 0x7f1fc6e00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff02258df0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff02258b50
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1ff1000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4004400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7fff02258b58
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1fc6e00000
MIOpen(HIP): 	workSpace = 0x7f1fcac00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff02258df0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff02258b50
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1ff1000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4004400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7fff02258b58
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1fc6e00000
MIOpen(HIP): 	workSpace = 0x7f1fcac00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff02258df0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff02258b50
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1ff1000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4004400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7fff02258b58
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1fc6e00000
MIOpen(HIP): 	workSpace = 0x7f1fcac00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff02258df0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff02258b50
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1ff1000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4004400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7fff02258b58
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1fc6e00000
MIOpen(HIP): 	workSpace = 0x7f1fcac00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x200db408
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe86074a30
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7efb54600000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b61400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b60200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 32
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7efb29600000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe86074790
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7efb54600000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b61400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe86074798
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b60200000
MIOpen(HIP): 	workSpace = 0x7efb29600000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe86074a30
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe86074790
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7efb54600000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b61400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe86074798
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7efb29600000
MIOpen(HIP): 	workSpace = 0x7efb25600000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe86074a30
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe86074790
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7efb54600000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b61400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe86074798
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7efb25600000
MIOpen(HIP): 	workSpace = 0x7efb29600000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe86074a30
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe86074790
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7efb54600000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b61400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe86074798
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7efb25600000
MIOpen(HIP): 	workSpace = 0x7efb29600000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe86074a30
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe86074790
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7efb54600000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b61400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe86074798
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7efb25600000
MIOpen(HIP): 	workSpace = 0x7efb29600000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe86074a30
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe86074790
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7efb54600000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b61400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffe86074798
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7efb25600000
MIOpen(HIP): 	workSpace = 0x7efb29600000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x4a25e7e8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc8aebf5a0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8fe4a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8fe4200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f8fc4a00000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 32
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f8fb8400000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc8aebf300
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8fe4a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8fe4200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc8aebf308
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f8fc4a00000
MIOpen(HIP): 	workSpace = 0x7f8fb8400000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc8aebf5a0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc8aebf300
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8fe4a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8fe4200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc8aebf308
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f8fb8400000
MIOpen(HIP): 	workSpace = 0x7f8fb3e00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc8aebf5a0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc8aebf300
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8fe4a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8fe4200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc8aebf308
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f8fb3e00000
MIOpen(HIP): 	workSpace = 0x7f8fb8400000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc8aebf5a0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc8aebf300
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8fe4a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8fe4200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc8aebf308
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f8fb3e00000
MIOpen(HIP): 	workSpace = 0x7f8fb8400000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc8aebf5a0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc8aebf300
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8fe4a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8fe4200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc8aebf308
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f8fb3e00000
MIOpen(HIP): 	workSpace = 0x7f8fb8400000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc8aebf5a0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc8aebf300
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8fe4a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8fe4200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc8aebf308
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f8fb3e00000
MIOpen(HIP): 	workSpace = 0x7f8fb8400000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2176bcd8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff51a5fa00
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa4e4800000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa4c5800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa4c4600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 32
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7fa4b8000000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff51a5f760
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa4e4800000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa4c5800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7fff51a5f768
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa4c4600000
MIOpen(HIP): 	workSpace = 0x7fa4b8000000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff51a5fa00
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff51a5f760
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa4e4800000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa4c5800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7fff51a5f768
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa4b8000000
MIOpen(HIP): 	workSpace = 0x7fa4b3a00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff51a5fa00
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff51a5f760
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa4e4800000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa4c5800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7fff51a5f768
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa4b3a00000
MIOpen(HIP): 	workSpace = 0x7fa4b8000000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff51a5fa00
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff51a5f760
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa4e4800000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa4c5800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7fff51a5f768
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa4b3a00000
MIOpen(HIP): 	workSpace = 0x7fa4b8000000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff51a5fa00
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff51a5f760
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa4e4800000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa4c5800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7fff51a5f768
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa4b3a00000
MIOpen(HIP): 	workSpace = 0x7fa4b8000000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff51a5fa00
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff51a5f760
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa4e4800000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa4c5800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7fff51a5f768
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa4b3a00000
MIOpen(HIP): 	workSpace = 0x7fa4b8000000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3c933368
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc22a37c70
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec714a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7edf20400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec6f4a00000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 32
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ec6e8a00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc22a379d0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec714a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7edf20400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc22a379d8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec6f4a00000
MIOpen(HIP): 	workSpace = 0x7ec6e8a00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc22a37c70
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc22a379d0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec714a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7edf20400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc22a379d8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec6e8a00000
MIOpen(HIP): 	workSpace = 0x7ec6e4800000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc22a37c70
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc22a379d0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec714a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7edf20400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc22a379d8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec6e4800000
MIOpen(HIP): 	workSpace = 0x7ec6e8a00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc22a37c70
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc22a379d0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec714a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7edf20400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc22a379d8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec6e4800000
MIOpen(HIP): 	workSpace = 0x7ec6e8a00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc22a37c70
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc22a379d0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec714a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7edf20400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc22a379d8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec6e4800000
MIOpen(HIP): 	workSpace = 0x7ec6e8a00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc22a37c70
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc22a379d0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec714a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7edf20400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffc22a379d8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec6e4800000
MIOpen(HIP): 	workSpace = 0x7ec6e8a00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1e156718
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeff882310
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa3f4a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fc3fd600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fc3fc400000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 32
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7fa3c9c00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeff882070
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa3f4a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fc3fd600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffeff882078
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fc3fc400000
MIOpen(HIP): 	workSpace = 0x7fa3c9c00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeff882310
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeff882070
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa3f4a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fc3fd600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffeff882078
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa3c9c00000
MIOpen(HIP): 	workSpace = 0x7fa3c5a00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeff882310
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeff882070
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa3f4a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fc3fd600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffeff882078
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa3c5a00000
MIOpen(HIP): 	workSpace = 0x7fa3c9c00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeff882310
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeff882070
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa3f4a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fc3fd600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffeff882078
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa3c5a00000
MIOpen(HIP): 	workSpace = 0x7fa3c9c00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeff882310
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeff882070
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa3f4a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fc3fd600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffeff882078
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa3c5a00000
MIOpen(HIP): 	workSpace = 0x7fa3c9c00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeff882310
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeff882070
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa3f4a00000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fc3fd600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffeff882078
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa3c5a00000
MIOpen(HIP): 	workSpace = 0x7fa3c9c00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1d486b48
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffee8d89c40
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6699000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f66a1600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f66a0400000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 32
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f6672600000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffee8d899a0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6699000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f66a1600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffee8d899a8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f66a0400000
MIOpen(HIP): 	workSpace = 0x7f6672600000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffee8d89c40
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffee8d899a0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6699000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f66a1600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffee8d899a8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6672600000
MIOpen(HIP): 	workSpace = 0x7f666e200000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffee8d89c40
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffee8d899a0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6699000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f66a1600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffee8d899a8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f666e200000
MIOpen(HIP): 	workSpace = 0x7f6672600000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffee8d89c40
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffee8d899a0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6699000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f66a1600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffee8d899a8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f666e200000
MIOpen(HIP): 	workSpace = 0x7f6672600000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffee8d89c40
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffee8d899a0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6699000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f66a1600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffee8d899a8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f666e200000
MIOpen(HIP): 	workSpace = 0x7f6672600000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffee8d89c40
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffee8d899a0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6699000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f66a1600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffee8d899a8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f666e200000
MIOpen(HIP): 	workSpace = 0x7f6672600000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1d6b5868
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9345d860
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1062800000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1047a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1046800000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 32
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f103a200000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9345d5c0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1062800000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1047a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd9345d5c8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1046800000
MIOpen(HIP): 	workSpace = 0x7f103a200000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9345d860
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9345d5c0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1062800000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1047a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd9345d5c8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f103a200000
MIOpen(HIP): 	workSpace = 0x7f1035c00000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9345d860
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9345d5c0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1062800000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1047a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd9345d5c8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1035c00000
MIOpen(HIP): 	workSpace = 0x7f103a200000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9345d860
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9345d5c0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1062800000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1047a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd9345d5c8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1035c00000
MIOpen(HIP): 	workSpace = 0x7f103a200000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9345d860
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9345d5c0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1062800000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1047a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd9345d5c8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1035c00000
MIOpen(HIP): 	workSpace = 0x7f103a200000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 576 416 }
MIOpen(HIP): 	stride.values = { 7667712 239616 239616 416 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9345d860
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9345d5c0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1062800000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1047a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 5
MIOpen(HIP): 	beta = 0x7ffd9345d5c8
MIOpen(HIP): 	yDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1035c00000
MIOpen(HIP): 	workSpace = 0x7f103a200000
MIOpen(HIP): 	workSpaceSize = 61778688
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 576, 416}, {7667712, 239616, 239616, 416, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x396150e8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 288 208 }
MIOpen(HIP): 	stride.values = { 1916928 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd42099540
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 288, 208}, {1916928, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f9bdd000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9be5800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 32, 1, 288, 208}, {1916928, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9be4200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 32
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f9bb3e00000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd420992a0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f9bdd000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9be5800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd420992a8
MIOpen(HIP): 	yDesc = {1, 32, 1, 288, 208}, {1916928, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9be4200000
MIOpen(HIP): 	workSpace = 0x7f9bb3e00000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 288, 208}, {1916928, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 288 208 }
MIOpen(HIP): 	stride.values = { 1916928 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd42099540
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd420992a0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f9bdd000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9be5800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd420992a8
MIOpen(HIP): 	yDesc = {1, 32, 1, 288, 208}, {1916928, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9be45a8000
MIOpen(HIP): 	workSpace = 0x7f9bb3e00000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 288, 208}, {1916928, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 288 208 }
MIOpen(HIP): 	stride.values = { 1916928 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd42099540
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd420992a0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f9bdd000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9be5800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd420992a8
MIOpen(HIP): 	yDesc = {1, 32, 1, 288, 208}, {1916928, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9be45a8000
MIOpen(HIP): 	workSpace = 0x7f9bb3e00000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 288, 208}, {1916928, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 288 208 }
MIOpen(HIP): 	stride.values = { 1916928 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd42099540
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd420992a0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f9bdd000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9be5800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd420992a8
MIOpen(HIP): 	yDesc = {1, 32, 1, 288, 208}, {1916928, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9be45a8000
MIOpen(HIP): 	workSpace = 0x7f9bb3e00000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 288, 208}, {1916928, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 288 208 }
MIOpen(HIP): 	stride.values = { 1916928 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd42099540
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd420992a0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f9bdd000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9be5800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd420992a8
MIOpen(HIP): 	yDesc = {1, 32, 1, 288, 208}, {1916928, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9be45a8000
MIOpen(HIP): 	workSpace = 0x7f9bb3e00000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 288, 208}, {1916928, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 578 418 }
MIOpen(HIP): 	stride.values = { 23193984 724812 241604 418 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a20003afc4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 32 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 1 288 208 }
MIOpen(HIP): 	stride.values = { 1916928 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd42099540
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd420992a0
MIOpen(HIP): 	xDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): 	x = 0x7f9bdd000000
MIOpen(HIP): 	wDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9be5800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd420992a8
MIOpen(HIP): 	yDesc = {1, 32, 1, 288, 208}, {1916928, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f9be45a8000
MIOpen(HIP): 	workSpace = 0x7f9bb3e00000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 578 -W 418 -k 32 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {32, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 1, 288, 208}, {1916928, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 578, 418}, {23193984, 724812, 241604, 418, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x15931ba8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 290 210 }
MIOpen(HIP): 	stride.values = { 5846400 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffffda389d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2d89e00000
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2d89400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2d68600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 32
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f2d59e00000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffffda38730
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2d89e00000
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2d89400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffffda38738
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2d68600000
MIOpen(HIP): 	workSpace = 0x7f2d59e00000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 290 210 }
MIOpen(HIP): 	stride.values = { 5846400 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffffda389d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffffda38730
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2d89e00000
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2d89400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffffda38738
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2d68d50000
MIOpen(HIP): 	workSpace = 0x7f2d59e00000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 290 210 }
MIOpen(HIP): 	stride.values = { 5846400 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffffda389d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffffda38730
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2d89e00000
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2d89400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffffda38738
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2d68d50000
MIOpen(HIP): 	workSpace = 0x7f2d59e00000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 290 210 }
MIOpen(HIP): 	stride.values = { 5846400 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffffda389d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffffda38730
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2d89e00000
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2d89400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffffda38738
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2d68d50000
MIOpen(HIP): 	workSpace = 0x7f2d59e00000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 290 210 }
MIOpen(HIP): 	stride.values = { 5846400 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffffda389d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffffda38730
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2d89e00000
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2d89400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffffda38738
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2d68d50000
MIOpen(HIP): 	workSpace = 0x7f2d59e00000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 290 210 }
MIOpen(HIP): 	stride.values = { 5846400 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffffda389d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffffda38730
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f2d89e00000
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2d89400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffffda38738
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2d68d50000
MIOpen(HIP): 	workSpace = 0x7f2d59e00000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x29e3b2b8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffced446240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec7bca00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec79d800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec79c200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ec787200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffced445fa0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec7bca00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec79d800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffced445fa8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec79c200000
MIOpen(HIP): 	workSpace = 0x7ec787200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffced446240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffced445fa0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec7bca00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec79d800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffced445fa8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec79c950000
MIOpen(HIP): 	workSpace = 0x7ec787200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffced446240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffced445fa0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec7bca00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec79d800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffced445fa8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec79c950000
MIOpen(HIP): 	workSpace = 0x7ec787200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffced446240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffced445fa0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec7bca00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec79d800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffced445fa8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec79c950000
MIOpen(HIP): 	workSpace = 0x7ec787200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffced446240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffced445fa0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec7bca00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec79d800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffced445fa8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec79c950000
MIOpen(HIP): 	workSpace = 0x7ec787200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffced446240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffced445fa0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec7bca00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec79d800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffced445fa8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec79c950000
MIOpen(HIP): 	workSpace = 0x7ec787200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x24405ea8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 290 210 }
MIOpen(HIP): 	stride.values = { 5846400 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff8f64cab0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b9ea00000
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b9e200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b9cc00000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 32
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f1b6f400000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff8f64c810
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b9ea00000
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b9e200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff8f64c818
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b9cc00000
MIOpen(HIP): 	workSpace = 0x7f1b6f400000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 290 210 }
MIOpen(HIP): 	stride.values = { 5846400 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff8f64cab0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff8f64c810
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b9ea00000
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b9e200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff8f64c818
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b9d350000
MIOpen(HIP): 	workSpace = 0x7f1b6f400000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 290 210 }
MIOpen(HIP): 	stride.values = { 5846400 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff8f64cab0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff8f64c810
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b9ea00000
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b9e200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff8f64c818
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b9d350000
MIOpen(HIP): 	workSpace = 0x7f1b6f400000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 290 210 }
MIOpen(HIP): 	stride.values = { 5846400 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff8f64cab0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff8f64c810
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b9ea00000
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b9e200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff8f64c818
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b9d350000
MIOpen(HIP): 	workSpace = 0x7f1b6f400000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 290 210 }
MIOpen(HIP): 	stride.values = { 5846400 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff8f64cab0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff8f64c810
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b9ea00000
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b9e200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff8f64c818
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b9d350000
MIOpen(HIP): 	workSpace = 0x7f1b6f400000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 32 3 290 210 }
MIOpen(HIP): 	stride.values = { 5846400 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 32 3 3 3 }
MIOpen(HIP): 	stride.values = { 864 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff8f64cab0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff8f64c810
MIOpen(HIP): 	xDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b9ea00000
MIOpen(HIP): 	wDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b9e200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff8f64c818
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b9d350000
MIOpen(HIP): 	workSpace = 0x7f1b6f400000
MIOpen(HIP): 	workSpaceSize = 103514112
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 32 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 32, 3, 3, 3}, {864, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 32, 3, 290, 210}, {5846400, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a8a9ef8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff03508830
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5015800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5014e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4ff4600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f4fdfc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff03508590
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5015800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5014e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff03508598
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4ff4600000
MIOpen(HIP): 	workSpace = 0x7f4fdfc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff03508830
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff03508590
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5015800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5014e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff03508598
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4ff4d50000
MIOpen(HIP): 	workSpace = 0x7f4fdfc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff03508830
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff03508590
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5015800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5014e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff03508598
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4ff4d50000
MIOpen(HIP): 	workSpace = 0x7f4fdfc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff03508830
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff03508590
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5015800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5014e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff03508598
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4ff4d50000
MIOpen(HIP): 	workSpace = 0x7f4fdfc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff03508830
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff03508590
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5015800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5014e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff03508598
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4ff4d50000
MIOpen(HIP): 	workSpace = 0x7f4fdfc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff03508830
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff03508590
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5015800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5014e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff03508598
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4ff4d50000
MIOpen(HIP): 	workSpace = 0x7f4fdfc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2b66e518
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff4212b590
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f222a000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2229c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2228600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f21f4c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff4212b2f0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f222a000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2229c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff4212b2f8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2228600000
MIOpen(HIP): 	workSpace = 0x7f21f4c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff4212b590
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff4212b2f0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f222a000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2229c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff4212b2f8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2228d50000
MIOpen(HIP): 	workSpace = 0x7f21f4c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff4212b590
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff4212b2f0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f222a000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2229c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff4212b2f8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2228d50000
MIOpen(HIP): 	workSpace = 0x7f21f4c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff4212b590
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff4212b2f0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f222a000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2229c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff4212b2f8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2228d50000
MIOpen(HIP): 	workSpace = 0x7f21f4c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff4212b590
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff4212b2f0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f222a000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2229c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff4212b2f8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2228d50000
MIOpen(HIP): 	workSpace = 0x7f21f4c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff4212b590
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff4212b2f0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f222a000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2229c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff4212b2f8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f2228d50000
MIOpen(HIP): 	workSpace = 0x7f21f4c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x200ebcb8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff9b8c7040
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4e8e000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4e8dc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4e8c600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f4e58c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff9b8c6da0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4e8e000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4e8dc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff9b8c6da8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4e8c600000
MIOpen(HIP): 	workSpace = 0x7f4e58c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff9b8c7040
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff9b8c6da0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4e8e000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4e8dc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff9b8c6da8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4e8cd50000
MIOpen(HIP): 	workSpace = 0x7f4e58c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff9b8c7040
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff9b8c6da0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4e8e000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4e8dc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff9b8c6da8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4e8cd50000
MIOpen(HIP): 	workSpace = 0x7f4e58c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff9b8c7040
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff9b8c6da0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4e8e000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4e8dc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff9b8c6da8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4e8cd50000
MIOpen(HIP): 	workSpace = 0x7f4e58c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff9b8c7040
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff9b8c6da0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4e8e000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4e8dc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff9b8c6da8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4e8cd50000
MIOpen(HIP): 	workSpace = 0x7f4e58c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff9b8c7040
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff9b8c6da0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f4e8e000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f4e8dc00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff9b8c6da8
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f4e8cd50000
MIOpen(HIP): 	workSpace = 0x7f4e58c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x55cdf558
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff7c84cb10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b55600000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b54c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b34600000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f1b1fc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff7c84c870
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b55600000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b54c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff7c84c878
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b34600000
MIOpen(HIP): 	workSpace = 0x7f1b1fc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff7c84cb10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff7c84c870
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b55600000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b54c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff7c84c878
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b34d50000
MIOpen(HIP): 	workSpace = 0x7f1b1fc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff7c84cb10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff7c84c870
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b55600000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b54c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff7c84c878
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b34d50000
MIOpen(HIP): 	workSpace = 0x7f1b1fc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff7c84cb10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff7c84c870
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b55600000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b54c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff7c84c878
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b34d50000
MIOpen(HIP): 	workSpace = 0x7f1b1fc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff7c84cb10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff7c84c870
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b55600000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b54c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff7c84c878
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b34d50000
MIOpen(HIP): 	workSpace = 0x7f1b1fc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff7c84cb10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff7c84c870
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1b55600000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1b54c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff7c84c878
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1b34d50000
MIOpen(HIP): 	workSpace = 0x7f1b1fc00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x238484d8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe031e8bf0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6b79e00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8b84c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6b78800000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f6b45200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe031e8950
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6b79e00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8b84c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe031e8958
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6b78800000
MIOpen(HIP): 	workSpace = 0x7f6b45200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe031e8bf0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe031e8950
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6b79e00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8b84c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe031e8958
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6b78f50000
MIOpen(HIP): 	workSpace = 0x7f6b45200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe031e8bf0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe031e8950
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6b79e00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8b84c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe031e8958
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6b78f50000
MIOpen(HIP): 	workSpace = 0x7f6b45200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe031e8bf0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe031e8950
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6b79e00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8b84c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe031e8958
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6b78f50000
MIOpen(HIP): 	workSpace = 0x7f6b45200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe031e8bf0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe031e8950
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6b79e00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8b84c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe031e8958
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6b78f50000
MIOpen(HIP): 	workSpace = 0x7f6b45200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe031e8bf0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe031e8950
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f6b79e00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8b84c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe031e8958
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f6b78f50000
MIOpen(HIP): 	workSpace = 0x7f6b45200000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x26d61488
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff172c8bd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f064e000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f064d800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f064c200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f0618c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff172c8930
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f064e000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f064d800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff172c8938
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f064c200000
MIOpen(HIP): 	workSpace = 0x7f0618c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff172c8bd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff172c8930
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f064e000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f064d800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff172c8938
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f064c950000
MIOpen(HIP): 	workSpace = 0x7f0618c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff172c8bd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff172c8930
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f064e000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f064d800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff172c8938
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f064c950000
MIOpen(HIP): 	workSpace = 0x7f0618c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff172c8bd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff172c8930
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f064e000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f064d800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff172c8938
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f064c950000
MIOpen(HIP): 	workSpace = 0x7f0618c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff172c8bd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff172c8930
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f064e000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f064d800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff172c8938
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f064c950000
MIOpen(HIP): 	workSpace = 0x7f0618c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 288 208 }
MIOpen(HIP): 	stride.values = { 3833856 59904 59904 208 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff172c8bd0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff172c8930
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7f064e000000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f064d800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff172c8938
MIOpen(HIP): 	yDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): 	y = 0x7f064c950000
MIOpen(HIP): 	workSpace = 0x7f0618c00000
MIOpen(HIP): 	workSpaceSize = 207028224
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 288, 208}, {3833856, 59904, 59904, 208, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x26c33b98
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 104 }
MIOpen(HIP): 	stride.values = { 958464 14976 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffddaff5de0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 104}, {958464, 14976, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec231800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7efa3c800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 104}, {958464, 14976, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec230200000
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ec206600000
MIOpen(HIP): 	workSpaceSize = 51757056
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffddaff5b40
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec231800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7efa3c800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffddaff5b48
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 104}, {958464, 14976, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec230200000
MIOpen(HIP): 	workSpace = 0x7ec206600000
MIOpen(HIP): 	workSpaceSize = 51757056
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 104}, {958464, 14976, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 104 }
MIOpen(HIP): 	stride.values = { 958464 14976 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffddaff5de0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffddaff5b40
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec231800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7efa3c800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffddaff5b48
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 104}, {958464, 14976, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec2303d4000
MIOpen(HIP): 	workSpace = 0x7ec206600000
MIOpen(HIP): 	workSpaceSize = 51757056
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 104}, {958464, 14976, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 104 }
MIOpen(HIP): 	stride.values = { 958464 14976 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffddaff5de0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffddaff5b40
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec231800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7efa3c800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffddaff5b48
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 104}, {958464, 14976, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec2303d4000
MIOpen(HIP): 	workSpace = 0x7ec206600000
MIOpen(HIP): 	workSpaceSize = 51757056
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 104}, {958464, 14976, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 104 }
MIOpen(HIP): 	stride.values = { 958464 14976 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffddaff5de0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffddaff5b40
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec231800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7efa3c800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffddaff5b48
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 104}, {958464, 14976, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec2303d4000
MIOpen(HIP): 	workSpace = 0x7ec206600000
MIOpen(HIP): 	workSpaceSize = 51757056
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 104}, {958464, 14976, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 104 }
MIOpen(HIP): 	stride.values = { 958464 14976 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffddaff5de0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffddaff5b40
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec231800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7efa3c800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffddaff5b48
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 104}, {958464, 14976, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec2303d4000
MIOpen(HIP): 	workSpace = 0x7ec206600000
MIOpen(HIP): 	workSpaceSize = 51757056
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 104}, {958464, 14976, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 290 210 }
MIOpen(HIP): 	stride.values = { 11692800 182700 60900 210 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd20000ede4
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 104 }
MIOpen(HIP): 	stride.values = { 958464 14976 14976 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffddaff5de0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffddaff5b40
MIOpen(HIP): 	xDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec231800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7efa3c800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffddaff5b48
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 104}, {958464, 14976, 14976, 104, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec2303d4000
MIOpen(HIP): 	workSpace = 0x7ec206600000
MIOpen(HIP): 	workSpaceSize = 51757056
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 290 -W 210 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 104}, {958464, 14976, 14976, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 290, 210}, {11692800, 182700, 60900, 210, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x4966e788
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9d6d7170
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7fcb69c00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fab64800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7fcb6a18f800
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7fab3a600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9d6d6ed0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7fcb69c00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fab64800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd9d6d6ed8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7fcb6a18f800
MIOpen(HIP): 	workSpace = 0x7fab3a600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9d6d7170
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9d6d6ed0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7fcb69c00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fab64800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd9d6d6ed8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7fcb6a35a800
MIOpen(HIP): 	workSpace = 0x7fab3a600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9d6d7170
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9d6d6ed0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7fcb69c00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fab64800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd9d6d6ed8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7fcb6a35a800
MIOpen(HIP): 	workSpace = 0x7fab3a600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9d6d7170
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9d6d6ed0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7fcb69c00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fab64800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd9d6d6ed8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7fcb6a35a800
MIOpen(HIP): 	workSpace = 0x7fab3a600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9d6d7170
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9d6d6ed0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7fcb69c00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fab64800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd9d6d6ed8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7fcb6a35a800
MIOpen(HIP): 	workSpace = 0x7fab3a600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd9d6d7170
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd9d6d6ed0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7fcb69c00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fab64800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd9d6d6ed8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7fcb6a35a800
MIOpen(HIP): 	workSpace = 0x7fab3a600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1741ab48
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1533e210
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5cd5600000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5cd4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5cd5b8f800
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f5caa600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1533df70
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5cd5600000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5cd4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe1533df78
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5cd5b8f800
MIOpen(HIP): 	workSpace = 0x7f5caa600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1533e210
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1533df70
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5cd5600000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5cd4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe1533df78
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5cd5d5a800
MIOpen(HIP): 	workSpace = 0x7f5caa600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1533e210
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1533df70
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5cd5600000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5cd4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe1533df78
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5cd5d5a800
MIOpen(HIP): 	workSpace = 0x7f5caa600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1533e210
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1533df70
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5cd5600000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5cd4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe1533df78
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5cd5d5a800
MIOpen(HIP): 	workSpace = 0x7f5caa600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1533e210
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1533df70
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5cd5600000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5cd4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe1533df78
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5cd5d5a800
MIOpen(HIP): 	workSpace = 0x7f5caa600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe1533e210
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe1533df70
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f5cd5600000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f5cd4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe1533df78
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5cd5d5a800
MIOpen(HIP): 	workSpace = 0x7f5caa600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x7d5e5a8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffecc77db0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7838800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7819800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7838d8f800
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f780dc00000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffecc77b10
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7838800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7819800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffecc77b18
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7838d8f800
MIOpen(HIP): 	workSpace = 0x7f780dc00000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffecc77db0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffecc77b10
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7838800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7819800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffecc77b18
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7838f5a800
MIOpen(HIP): 	workSpace = 0x7f780dc00000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffecc77db0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffecc77b10
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7838800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7819800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffecc77b18
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7838f5a800
MIOpen(HIP): 	workSpace = 0x7f780dc00000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffecc77db0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffecc77b10
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7838800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7819800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffecc77b18
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7838f5a800
MIOpen(HIP): 	workSpace = 0x7f780dc00000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffecc77db0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffecc77b10
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7838800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7819800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffecc77b18
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7838f5a800
MIOpen(HIP): 	workSpace = 0x7f780dc00000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffecc77db0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffecc77b10
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7838800000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7819800000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffecc77b18
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7838f5a800
MIOpen(HIP): 	workSpace = 0x7f780dc00000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1912ef18
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcaff2aed0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f17ee400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2ff8400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f17ee98f800
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f17c2600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcaff2ac30
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f17ee400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2ff8400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcaff2ac38
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f17ee98f800
MIOpen(HIP): 	workSpace = 0x7f17c2600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcaff2aed0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcaff2ac30
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f17ee400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2ff8400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcaff2ac38
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f17eeb5a800
MIOpen(HIP): 	workSpace = 0x7f17c2600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcaff2aed0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcaff2ac30
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f17ee400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2ff8400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcaff2ac38
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f17eeb5a800
MIOpen(HIP): 	workSpace = 0x7f17c2600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcaff2aed0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcaff2ac30
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f17ee400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2ff8400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcaff2ac38
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f17eeb5a800
MIOpen(HIP): 	workSpace = 0x7f17c2600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcaff2aed0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcaff2ac30
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f17ee400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2ff8400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcaff2ac38
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f17eeb5a800
MIOpen(HIP): 	workSpace = 0x7f17c2600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffcaff2aed0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffcaff2ac30
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f17ee400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f2ff8400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffcaff2ac38
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f17eeb5a800
MIOpen(HIP): 	workSpace = 0x7f17c2600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x41276268
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc064e2a80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f14d4200000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f14b5200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f14d478f800
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f14a9600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc064e27e0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f14d4200000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f14b5200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc064e27e8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f14d478f800
MIOpen(HIP): 	workSpace = 0x7f14a9600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc064e2a80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc064e27e0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f14d4200000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f14b5200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc064e27e8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f14d495a800
MIOpen(HIP): 	workSpace = 0x7f14a9600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc064e2a80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc064e27e0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f14d4200000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f14b5200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc064e27e8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f14d495a800
MIOpen(HIP): 	workSpace = 0x7f14a9600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc064e2a80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc064e27e0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f14d4200000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f14b5200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc064e27e8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f14d495a800
MIOpen(HIP): 	workSpace = 0x7f14a9600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc064e2a80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc064e27e0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f14d4200000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f14b5200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc064e27e8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f14d495a800
MIOpen(HIP): 	workSpace = 0x7f14a9600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc064e2a80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc064e27e0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f14d4200000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f14b5200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc064e27e8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f14d495a800
MIOpen(HIP): 	workSpace = 0x7f14a9600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x234263e8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff0ef6e7b0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f0f10400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee706e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f0f1098f800
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ee6da600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff0ef6e510
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f0f10400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee706e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff0ef6e518
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f0f1098f800
MIOpen(HIP): 	workSpace = 0x7ee6da600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff0ef6e7b0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff0ef6e510
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f0f10400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee706e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff0ef6e518
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f0f10b5a800
MIOpen(HIP): 	workSpace = 0x7ee6da600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff0ef6e7b0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff0ef6e510
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f0f10400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee706e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff0ef6e518
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f0f10b5a800
MIOpen(HIP): 	workSpace = 0x7ee6da600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff0ef6e7b0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff0ef6e510
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f0f10400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee706e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff0ef6e518
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f0f10b5a800
MIOpen(HIP): 	workSpace = 0x7ee6da600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff0ef6e7b0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff0ef6e510
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f0f10400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee706e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff0ef6e518
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f0f10b5a800
MIOpen(HIP): 	workSpace = 0x7ee6da600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff0ef6e7b0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff0ef6e510
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f0f10400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee706e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff0ef6e518
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f0f10b5a800
MIOpen(HIP): 	workSpace = 0x7ee6da600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3d05c318
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc7a3ad190
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f912a200000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9129a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f912a78f800
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f90fe600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc7a3acef0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f912a200000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9129a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc7a3acef8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f912a78f800
MIOpen(HIP): 	workSpace = 0x7f90fe600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc7a3ad190
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc7a3acef0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f912a200000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9129a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc7a3acef8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f912a95a800
MIOpen(HIP): 	workSpace = 0x7f90fe600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc7a3ad190
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc7a3acef0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f912a200000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9129a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc7a3acef8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f912a95a800
MIOpen(HIP): 	workSpace = 0x7f90fe600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc7a3ad190
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc7a3acef0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f912a200000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9129a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc7a3acef8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f912a95a800
MIOpen(HIP): 	workSpace = 0x7f90fe600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc7a3ad190
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc7a3acef0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f912a200000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9129a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc7a3acef8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f912a95a800
MIOpen(HIP): 	workSpace = 0x7f90fe600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc7a3ad190
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc7a3acef0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7f912a200000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f9129a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc7a3acef8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7f912a95a800
MIOpen(HIP): 	workSpace = 0x7f90fe600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x10428ba8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeca58c240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7fadbda00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fadbd000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7fadbdf8f800
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7fad92600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeca58bfa0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7fadbda00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fadbd000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffeca58bfa8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7fadbdf8f800
MIOpen(HIP): 	workSpace = 0x7fad92600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeca58c240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeca58bfa0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7fadbda00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fadbd000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffeca58bfa8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7fadbe15a800
MIOpen(HIP): 	workSpace = 0x7fad92600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeca58c240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeca58bfa0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7fadbda00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fadbd000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffeca58bfa8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7fadbe15a800
MIOpen(HIP): 	workSpace = 0x7fad92600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeca58c240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeca58bfa0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7fadbda00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fadbd000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffeca58bfa8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7fadbe15a800
MIOpen(HIP): 	workSpace = 0x7fad92600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeca58c240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeca58bfa0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7fadbda00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fadbd000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffeca58bfa8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7fadbe15a800
MIOpen(HIP): 	workSpace = 0x7fad92600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 144 102 }
MIOpen(HIP): 	stride.values = { 940032 14688 14688 102 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffeca58c240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffeca58bfa0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7fadbda00000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fadbd000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffeca58bfa8
MIOpen(HIP): 	yDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): 	y = 0x7fadbe15a800
MIOpen(HIP): 	workSpace = 0x7fad92600000
MIOpen(HIP): 	workSpaceSize = 50761728
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 144, 102}, {940032, 14688, 14688, 102, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3e75ecc8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 72 51 }
MIOpen(HIP): 	stride.values = { 235008 3672 3672 51 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff2fed4130
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 72, 51}, {235008, 3672, 3672, 51, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee2c6400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee2c6000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 64, 1, 72, 51}, {235008, 3672, 3672, 51, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee2c6036200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ee2c698f800
MIOpen(HIP): 	workSpaceSize = 12690432
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff2fed3e90
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee2c6400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee2c6000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff2fed3e98
MIOpen(HIP): 	yDesc = {1, 64, 1, 72, 51}, {235008, 3672, 3672, 51, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee2c6036200
MIOpen(HIP): 	workSpace = 0x7ee2c698f800
MIOpen(HIP): 	workSpaceSize = 12690432
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 72, 51}, {235008, 3672, 3672, 51, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 72 51 }
MIOpen(HIP): 	stride.values = { 235008 3672 3672 51 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff2fed4130
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff2fed3e90
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee2c6400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee2c6000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff2fed3e98
MIOpen(HIP): 	yDesc = {1, 64, 1, 72, 51}, {235008, 3672, 3672, 51, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee2c60a8e00
MIOpen(HIP): 	workSpace = 0x7ee2c698f800
MIOpen(HIP): 	workSpaceSize = 12690432
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 72, 51}, {235008, 3672, 3672, 51, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 72 51 }
MIOpen(HIP): 	stride.values = { 235008 3672 3672 51 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff2fed4130
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff2fed3e90
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee2c6400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee2c6000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff2fed3e98
MIOpen(HIP): 	yDesc = {1, 64, 1, 72, 51}, {235008, 3672, 3672, 51, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee2c60a8e00
MIOpen(HIP): 	workSpace = 0x7ee2c698f800
MIOpen(HIP): 	workSpaceSize = 12690432
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 72, 51}, {235008, 3672, 3672, 51, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 72 51 }
MIOpen(HIP): 	stride.values = { 235008 3672 3672 51 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff2fed4130
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff2fed3e90
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee2c6400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee2c6000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff2fed3e98
MIOpen(HIP): 	yDesc = {1, 64, 1, 72, 51}, {235008, 3672, 3672, 51, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee2c60a8e00
MIOpen(HIP): 	workSpace = 0x7ee2c698f800
MIOpen(HIP): 	workSpaceSize = 12690432
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 72, 51}, {235008, 3672, 3672, 51, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 72 51 }
MIOpen(HIP): 	stride.values = { 235008 3672 3672 51 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff2fed4130
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff2fed3e90
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee2c6400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee2c6000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff2fed3e98
MIOpen(HIP): 	yDesc = {1, 64, 1, 72, 51}, {235008, 3672, 3672, 51, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee2c60a8e00
MIOpen(HIP): 	workSpace = 0x7ee2c698f800
MIOpen(HIP): 	workSpaceSize = 12690432
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 72, 51}, {235008, 3672, 3672, 51, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 146 104 }
MIOpen(HIP): 	stride.values = { 2915328 45552 15184 104 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x6800003b50
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 64 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 1 72 51 }
MIOpen(HIP): 	stride.values = { 235008 3672 3672 51 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff2fed4130
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 2 2 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff2fed3e90
MIOpen(HIP): 	xDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee2c6400000
MIOpen(HIP): 	wDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ee2c6000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff2fed3e98
MIOpen(HIP): 	yDesc = {1, 64, 1, 72, 51}, {235008, 3672, 3672, 51, 1}, packed, 
MIOpen(HIP): 	y = 0x7ee2c60a8e00
MIOpen(HIP): 	workSpace = 0x7ee2c698f800
MIOpen(HIP): 	workSpaceSize = 12690432
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 146 -W 104 -k 64 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 2 -v 2 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 2, 2}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {64, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 1, 72, 51}, {235008, 3672, 3672, 51, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 146, 104}, {2915328, 45552, 15184, 104, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x28393498
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 74 54 }
MIOpen(HIP): 	stride.values = { 767232 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff48326f80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb24a200000
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb249e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb249e6c200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7fb24a376a00
MIOpen(HIP): 	workSpaceSize = 12939264
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff48326ce0
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb24a200000
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb249e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff48326ce8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb249e6c200
MIOpen(HIP): 	workSpace = 0x7fb24a376a00
MIOpen(HIP): 	workSpaceSize = 12939264
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 74 54 }
MIOpen(HIP): 	stride.values = { 767232 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff48326f80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff48326ce0
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb24a200000
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb249e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff48326ce8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb221600000
MIOpen(HIP): 	workSpace = 0x7fb24a376a00
MIOpen(HIP): 	workSpaceSize = 12939264
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 74 54 }
MIOpen(HIP): 	stride.values = { 767232 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff48326f80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff48326ce0
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb24a200000
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb249e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff48326ce8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb221600000
MIOpen(HIP): 	workSpace = 0x7fb24a376a00
MIOpen(HIP): 	workSpaceSize = 12939264
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 74 54 }
MIOpen(HIP): 	stride.values = { 767232 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff48326f80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff48326ce0
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb24a200000
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb249e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff48326ce8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb221600000
MIOpen(HIP): 	workSpace = 0x7fb24a376a00
MIOpen(HIP): 	workSpaceSize = 12939264
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 74 54 }
MIOpen(HIP): 	stride.values = { 767232 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff48326f80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff48326ce0
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb24a200000
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb249e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff48326ce8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb221600000
MIOpen(HIP): 	workSpace = 0x7fb24a376a00
MIOpen(HIP): 	workSpaceSize = 12939264
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 74 54 }
MIOpen(HIP): 	stride.values = { 767232 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff48326f80
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff48326ce0
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fb24a200000
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fb249e00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff48326ce8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fb221600000
MIOpen(HIP): 	workSpace = 0x7fb24a376a00
MIOpen(HIP): 	workSpaceSize = 12939264
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x233b4878
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff5fb5ac90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed0d4400000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed0b5400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed0b54d8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ed0ab000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff5fb5a9f0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed0d4400000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed0b5400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff5fb5a9f8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed0b54d8200
MIOpen(HIP): 	workSpace = 0x7ed0ab000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff5fb5ac90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff5fb5a9f0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed0d4400000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed0b5400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff5fb5a9f8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed0a9400000
MIOpen(HIP): 	workSpace = 0x7ed0ab000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff5fb5ac90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff5fb5a9f0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed0d4400000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed0b5400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff5fb5a9f8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed0a9400000
MIOpen(HIP): 	workSpace = 0x7ed0ab000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff5fb5ac90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff5fb5a9f0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed0d4400000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed0b5400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff5fb5a9f8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed0a9400000
MIOpen(HIP): 	workSpace = 0x7ed0ab000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff5fb5ac90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff5fb5a9f0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed0d4400000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed0b5400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff5fb5a9f8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed0a9400000
MIOpen(HIP): 	workSpace = 0x7ed0ab000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff5fb5ac90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff5fb5a9f0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ed0d4400000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed0b5400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff5fb5a9f8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed0a9400000
MIOpen(HIP): 	workSpace = 0x7ed0ab000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3e2d26f8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 74 54 }
MIOpen(HIP): 	stride.values = { 767232 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdb8f323d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8215e00000
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8215400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f821546c200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 64
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f8215f76a00
MIOpen(HIP): 	workSpaceSize = 12939264
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdb8f32130
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8215e00000
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8215400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdb8f32138
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f821546c200
MIOpen(HIP): 	workSpace = 0x7f8215f76a00
MIOpen(HIP): 	workSpaceSize = 12939264
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 74 54 }
MIOpen(HIP): 	stride.values = { 767232 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdb8f323d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdb8f32130
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8215e00000
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8215400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdb8f32138
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f81ece00000
MIOpen(HIP): 	workSpace = 0x7f8215f76a00
MIOpen(HIP): 	workSpaceSize = 12939264
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 74 54 }
MIOpen(HIP): 	stride.values = { 767232 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdb8f323d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdb8f32130
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8215e00000
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8215400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdb8f32138
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f81ece00000
MIOpen(HIP): 	workSpace = 0x7f8215f76a00
MIOpen(HIP): 	workSpaceSize = 12939264
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 74 54 }
MIOpen(HIP): 	stride.values = { 767232 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdb8f323d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdb8f32130
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8215e00000
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8215400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdb8f32138
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f81ece00000
MIOpen(HIP): 	workSpace = 0x7f8215f76a00
MIOpen(HIP): 	workSpaceSize = 12939264
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 74 54 }
MIOpen(HIP): 	stride.values = { 767232 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdb8f323d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdb8f32130
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8215e00000
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8215400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdb8f32138
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f81ece00000
MIOpen(HIP): 	workSpace = 0x7f8215f76a00
MIOpen(HIP): 	workSpaceSize = 12939264
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 64 3 74 54 }
MIOpen(HIP): 	stride.values = { 767232 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 64 3 3 3 }
MIOpen(HIP): 	stride.values = { 1728 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdb8f323d0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdb8f32130
MIOpen(HIP): 	xDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f8215e00000
MIOpen(HIP): 	wDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f8215400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdb8f32138
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f81ece00000
MIOpen(HIP): 	workSpace = 0x7f8215f76a00
MIOpen(HIP): 	workSpaceSize = 12939264
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 64 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 64, 3, 3, 3}, {1728, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 64, 3, 74, 54}, {767232, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x291bf8f8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe42c36940
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f518c600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3183000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f31830d8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f3180e00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe42c366a0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f518c600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3183000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe42c366a8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f31830d8200
MIOpen(HIP): 	workSpace = 0x7f3180e00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe42c36940
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe42c366a0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f518c600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3183000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe42c366a8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3158e00000
MIOpen(HIP): 	workSpace = 0x7f3180e00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe42c36940
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe42c366a0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f518c600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3183000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe42c366a8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3158e00000
MIOpen(HIP): 	workSpace = 0x7f3180e00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe42c36940
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe42c366a0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f518c600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3183000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe42c366a8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3158e00000
MIOpen(HIP): 	workSpace = 0x7f3180e00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe42c36940
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe42c366a0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f518c600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3183000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe42c366a8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3158e00000
MIOpen(HIP): 	workSpace = 0x7f3180e00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe42c36940
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe42c366a0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f518c600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3183000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe42c366a8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3158e00000
MIOpen(HIP): 	workSpace = 0x7f3180e00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xe104d88
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe4eb3fc0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee4ca600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec4c5200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec4c52d8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ec49be00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe4eb3d20
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee4ca600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec4c5200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe4eb3d28
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec4c52d8200
MIOpen(HIP): 	workSpace = 0x7ec49be00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe4eb3fc0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe4eb3d20
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee4ca600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec4c5200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe4eb3d28
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec49b200000
MIOpen(HIP): 	workSpace = 0x7ec49be00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe4eb3fc0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe4eb3d20
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee4ca600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec4c5200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe4eb3d28
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec49b200000
MIOpen(HIP): 	workSpace = 0x7ec49be00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe4eb3fc0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe4eb3d20
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee4ca600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec4c5200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe4eb3d28
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec49b200000
MIOpen(HIP): 	workSpace = 0x7ec49be00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe4eb3fc0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe4eb3d20
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee4ca600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec4c5200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe4eb3d28
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec49b200000
MIOpen(HIP): 	workSpace = 0x7ec49be00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe4eb3fc0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe4eb3d20
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ee4ca600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec4c5200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe4eb3d28
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec49b200000
MIOpen(HIP): 	workSpace = 0x7ec49be00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x22347be8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe4aac400
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f0069000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f0068600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f00686d8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f003f800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe4aac160
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f0069000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f0068600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe4aac168
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f00686d8200
MIOpen(HIP): 	workSpace = 0x7f003f800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe4aac400
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe4aac160
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f0069000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f0068600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe4aac168
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f003e400000
MIOpen(HIP): 	workSpace = 0x7f003f800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe4aac400
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe4aac160
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f0069000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f0068600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe4aac168
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f003e400000
MIOpen(HIP): 	workSpace = 0x7f003f800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe4aac400
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe4aac160
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f0069000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f0068600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe4aac168
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f003e400000
MIOpen(HIP): 	workSpace = 0x7f003f800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe4aac400
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe4aac160
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f0069000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f0068600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe4aac168
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f003e400000
MIOpen(HIP): 	workSpace = 0x7f003f800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fffe4aac400
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fffe4aac160
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f0069000000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f0068600000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fffe4aac168
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f003e400000
MIOpen(HIP): 	workSpace = 0x7f003f800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2c81dde8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc46747d40
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7b01e00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7b01400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7b014d8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f7ad7e00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc46747aa0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7b01e00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7b01400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc46747aa8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7b014d8200
MIOpen(HIP): 	workSpace = 0x7f7ad7e00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc46747d40
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc46747aa0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7b01e00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7b01400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc46747aa8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7ad7200000
MIOpen(HIP): 	workSpace = 0x7f7ad7e00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc46747d40
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc46747aa0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7b01e00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7b01400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc46747aa8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7ad7200000
MIOpen(HIP): 	workSpace = 0x7f7ad7e00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc46747d40
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc46747aa0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7b01e00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7b01400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc46747aa8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7ad7200000
MIOpen(HIP): 	workSpace = 0x7f7ad7e00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc46747d40
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc46747aa0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7b01e00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7b01400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc46747aa8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7ad7200000
MIOpen(HIP): 	workSpace = 0x7f7ad7e00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffc46747d40
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffc46747aa0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7b01e00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7b01400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffc46747aa8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f7ad7200000
MIOpen(HIP): 	workSpace = 0x7f7ad7e00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1a101e28
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdcd0ad720
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7939c00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7939400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f79394d8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f790fe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdcd0ad480
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7939c00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7939400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdcd0ad488
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f79394d8200
MIOpen(HIP): 	workSpace = 0x7f790fe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdcd0ad720
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdcd0ad480
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7939c00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7939400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdcd0ad488
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f790f200000
MIOpen(HIP): 	workSpace = 0x7f790fe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdcd0ad720
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdcd0ad480
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7939c00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7939400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdcd0ad488
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f790f200000
MIOpen(HIP): 	workSpace = 0x7f790fe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdcd0ad720
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdcd0ad480
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7939c00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7939400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdcd0ad488
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f790f200000
MIOpen(HIP): 	workSpace = 0x7f790fe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdcd0ad720
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdcd0ad480
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7939c00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7939400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdcd0ad488
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f790f200000
MIOpen(HIP): 	workSpace = 0x7f790fe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffdcd0ad720
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffdcd0ad480
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7939c00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f7939400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffdcd0ad488
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f790f200000
MIOpen(HIP): 	workSpace = 0x7f790fe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x50527ed8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd2aed3c10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f3ae5600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3ae4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3ae4cd8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f3abbe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd2aed3970
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f3ae5600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3ae4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd2aed3978
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3ae4cd8200
MIOpen(HIP): 	workSpace = 0x7f3abbe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd2aed3c10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd2aed3970
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f3ae5600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3ae4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd2aed3978
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3abaa00000
MIOpen(HIP): 	workSpace = 0x7f3abbe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd2aed3c10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd2aed3970
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f3ae5600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3ae4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd2aed3978
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3abaa00000
MIOpen(HIP): 	workSpace = 0x7f3abbe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd2aed3c10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd2aed3970
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f3ae5600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3ae4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd2aed3978
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3abaa00000
MIOpen(HIP): 	workSpace = 0x7f3abbe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd2aed3c10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd2aed3970
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f3ae5600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3ae4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd2aed3978
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3abaa00000
MIOpen(HIP): 	workSpace = 0x7f3abbe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd2aed3c10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd2aed3970
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f3ae5600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3ae4c00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd2aed3978
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3abaa00000
MIOpen(HIP): 	workSpace = 0x7f3abbe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1e4dd158
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe94959210
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa818c00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa818200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa8182d8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7fa7ef800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe94958f70
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa818c00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa818200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe94958f78
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa8182d8200
MIOpen(HIP): 	workSpace = 0x7fa7ef800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe94959210
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe94958f70
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa818c00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa818200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe94958f78
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa7ee000000
MIOpen(HIP): 	workSpace = 0x7fa7ef800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe94959210
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe94958f70
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa818c00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa818200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe94958f78
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa7ee000000
MIOpen(HIP): 	workSpace = 0x7fa7ef800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe94959210
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe94958f70
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa818c00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa818200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe94958f78
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa7ee000000
MIOpen(HIP): 	workSpace = 0x7fa7ef800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe94959210
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe94958f70
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa818c00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa818200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe94958f78
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa7ee000000
MIOpen(HIP): 	workSpace = 0x7fa7ef800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe94959210
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe94958f70
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7fa818c00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7fa818200000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe94958f78
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7fa7ee000000
MIOpen(HIP): 	workSpace = 0x7fa7ef800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x14efbd88
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffedc3212f0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ef1eaa00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ef1f0a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ef1f0ad8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ef1c6800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffedc321050
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ef1eaa00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ef1f0a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffedc321058
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ef1f0ad8200
MIOpen(HIP): 	workSpace = 0x7ef1c6800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffedc3212f0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffedc321050
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ef1eaa00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ef1f0a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffedc321058
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ef1c5200000
MIOpen(HIP): 	workSpace = 0x7ef1c6800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffedc3212f0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffedc321050
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ef1eaa00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ef1f0a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffedc321058
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ef1c5200000
MIOpen(HIP): 	workSpace = 0x7ef1c6800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffedc3212f0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffedc321050
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ef1eaa00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ef1f0a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffedc321058
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ef1c5200000
MIOpen(HIP): 	workSpace = 0x7ef1c6800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffedc3212f0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffedc321050
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ef1eaa00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ef1f0a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffedc321058
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ef1c5200000
MIOpen(HIP): 	workSpace = 0x7ef1c6800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffedc3212f0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffedc321050
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ef1eaa00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ef1f0a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffedc321058
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ef1c5200000
MIOpen(HIP): 	workSpace = 0x7ef1c6800000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1fcdab18
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd1a2ca760
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f3616400000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3615a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3615ad8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f35ebe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd1a2ca4c0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f3616400000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3615a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd1a2ca4c8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f3615ad8200
MIOpen(HIP): 	workSpace = 0x7f35ebe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd1a2ca760
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd1a2ca4c0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f3616400000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3615a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd1a2ca4c8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f35eb800000
MIOpen(HIP): 	workSpace = 0x7f35ebe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd1a2ca760
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd1a2ca4c0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f3616400000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3615a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd1a2ca4c8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f35eb800000
MIOpen(HIP): 	workSpace = 0x7f35ebe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd1a2ca760
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd1a2ca4c0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f3616400000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3615a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd1a2ca4c8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f35eb800000
MIOpen(HIP): 	workSpace = 0x7f35ebe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd1a2ca760
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd1a2ca4c0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f3616400000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3615a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd1a2ca4c8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f35eb800000
MIOpen(HIP): 	workSpace = 0x7f35ebe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffd1a2ca760
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffd1a2ca4c0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f3616400000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f3615a00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffd1a2ca4c8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f35eb800000
MIOpen(HIP): 	workSpace = 0x7f35ebe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x33c06f88
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffff5115aa0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7934200000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f512ac00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f512acd8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f5128a00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffff5115800
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7934200000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f512ac00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffff5115808
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f512acd8200
MIOpen(HIP): 	workSpace = 0x7f5128a00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffff5115aa0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffff5115800
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7934200000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f512ac00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffff5115808
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5100a00000
MIOpen(HIP): 	workSpace = 0x7f5128a00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffff5115aa0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffff5115800
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7934200000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f512ac00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffff5115808
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5100a00000
MIOpen(HIP): 	workSpace = 0x7f5128a00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffff5115aa0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffff5115800
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7934200000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f512ac00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffff5115808
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5100a00000
MIOpen(HIP): 	workSpace = 0x7f5128a00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffff5115aa0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffff5115800
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7934200000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f512ac00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffff5115808
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5100a00000
MIOpen(HIP): 	workSpace = 0x7f5128a00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffff5115aa0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffff5115800
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f7934200000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f512ac00000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffff5115808
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f5100a00000
MIOpen(HIP): 	workSpace = 0x7f5128a00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2ccfbea8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff7ee8ce90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f17b0600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1791400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f17914d8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f1787000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff7ee8cbf0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f17b0600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1791400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff7ee8cbf8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f17914d8200
MIOpen(HIP): 	workSpace = 0x7f1787000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff7ee8ce90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff7ee8cbf0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f17b0600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1791400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff7ee8cbf8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1785a00000
MIOpen(HIP): 	workSpace = 0x7f1787000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff7ee8ce90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff7ee8cbf0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f17b0600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1791400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff7ee8cbf8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1785a00000
MIOpen(HIP): 	workSpace = 0x7f1787000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff7ee8ce90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff7ee8cbf0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f17b0600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1791400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff7ee8cbf8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1785a00000
MIOpen(HIP): 	workSpace = 0x7f1787000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff7ee8ce90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff7ee8cbf0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f17b0600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1791400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff7ee8cbf8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1785a00000
MIOpen(HIP): 	workSpace = 0x7f1787000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff7ee8ce90
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff7ee8cbf0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f17b0600000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1791400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff7ee8cbf8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1785a00000
MIOpen(HIP): 	workSpace = 0x7f1787000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x475ff428
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe4aa60240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1aa4200000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1a89400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1a894d8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f1a7f000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe4aa5ffa0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1aa4200000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1a89400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe4aa5ffa8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1a894d8200
MIOpen(HIP): 	workSpace = 0x7f1a7f000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe4aa60240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe4aa5ffa0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1aa4200000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1a89400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe4aa5ffa8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1a7d800000
MIOpen(HIP): 	workSpace = 0x7f1a7f000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe4aa60240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe4aa5ffa0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1aa4200000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1a89400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe4aa5ffa8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1a7d800000
MIOpen(HIP): 	workSpace = 0x7f1a7f000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe4aa60240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe4aa5ffa0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1aa4200000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1a89400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe4aa5ffa8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1a7d800000
MIOpen(HIP): 	workSpace = 0x7f1a7f000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe4aa60240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe4aa5ffa0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1aa4200000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1a89400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe4aa5ffa8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1a7d800000
MIOpen(HIP): 	workSpace = 0x7f1a7f000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe4aa60240
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe4aa5ffa0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7f1aa4200000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7f1a89400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe4aa5ffa8
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f1a7d800000
MIOpen(HIP): 	workSpace = 0x7f1a7f000000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2d63cde8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe749b7f10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ef1f8800000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed1ef400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed1ef4d8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ed1ed200000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe749b7c70
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ef1f8800000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed1ef400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe749b7c78
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed1ef4d8200
MIOpen(HIP): 	workSpace = 0x7ed1ed200000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe749b7f10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe749b7c70
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ef1f8800000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed1ef400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe749b7c78
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed1c5200000
MIOpen(HIP): 	workSpace = 0x7ed1ed200000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe749b7f10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe749b7c70
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ef1f8800000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed1ef400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe749b7c78
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed1c5200000
MIOpen(HIP): 	workSpace = 0x7ed1ed200000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe749b7f10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe749b7c70
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ef1f8800000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed1ef400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe749b7c78
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed1c5200000
MIOpen(HIP): 	workSpace = 0x7ed1ed200000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe749b7f10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe749b7c70
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ef1f8800000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed1ef400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe749b7c78
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed1c5200000
MIOpen(HIP): 	workSpace = 0x7ed1ed200000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe749b7f10
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe749b7c70
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ef1f8800000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ed1ef400000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe749b7c78
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ed1c5200000
MIOpen(HIP): 	workSpace = 0x7ed1ed200000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x586ec738
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffef0edf200
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec489a00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec489000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec4890d8200
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7ec45fe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffef0edef60
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec489a00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec489000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffef0edef68
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec4890d8200
MIOpen(HIP): 	workSpace = 0x7ec45fe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffef0edf200
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffef0edef60
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec489a00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec489000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffef0edef68
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec45ee00000
MIOpen(HIP): 	workSpace = 0x7ec45fe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffef0edf200
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffef0edef60
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec489a00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec489000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffef0edef68
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec45ee00000
MIOpen(HIP): 	workSpace = 0x7ec45fe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffef0edf200
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffef0edef60
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec489a00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec489000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffef0edef68
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec45ee00000
MIOpen(HIP): 	workSpace = 0x7ec45fe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffef0edf200
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffef0edef60
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec489a00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec489000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffef0edef68
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec45ee00000
MIOpen(HIP): 	workSpace = 0x7ec45fe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 3 74 54 }
MIOpen(HIP): 	stride.values = { 1534464 11988 3996 54 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3600000f9c
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 128 128 3 3 3 }
MIOpen(HIP): 	stride.values = { 3456 27 9 3 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffef0edf200
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffef0edef60
MIOpen(HIP): 	xDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): 	x = 0x7ec489a00000
MIOpen(HIP): 	wDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): 	w = 0x7ec489000000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffef0edef68
MIOpen(HIP): 	yDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7ec45ee00000
MIOpen(HIP): 	workSpace = 0x7ec45fe00000
MIOpen(HIP): 	workSpaceSize = 25878528
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 3 -H 74 -W 54 -k 128 --fil_d 3 -y 3 -x 3 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwdRest::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	name + ", non 1x1" = convolution, non 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {128, 128, 3, 3, 3}, {3456, 27, 9, 3, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 3, 74, 54}, {1534464, 11988, 3996, 54, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0xd6ebf28
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 8 128 1 1 1 }
MIOpen(HIP): 	stride.values = { 128 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 1 72 52 }
MIOpen(HIP): 	stride.values = { 29952 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff19045960
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {8, 128, 1, 1, 1}, {128, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f380f400000
MIOpen(HIP): 	wDesc = {8, 128, 1, 1, 1}, {128, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f380f4ea000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f380f4eaa00
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 128
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f380f4f9400
MIOpen(HIP): 	workSpaceSize = 1020416
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 1 -H 72 -W 52 -k 8 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff190456c0
MIOpen(HIP): 	xDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f380f400000
MIOpen(HIP): 	wDesc = {8, 128, 1, 1, 1}, {128, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f380f4ea000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff190456c8
MIOpen(HIP): 	yDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f380f4eaa00
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 1 -H 72 -W 52 -k 8 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {8, 128, 1, 1, 1}, {128, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 8 128 1 1 1 }
MIOpen(HIP): 	stride.values = { 128 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 1 72 52 }
MIOpen(HIP): 	stride.values = { 29952 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff19045960
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff190456c0
MIOpen(HIP): 	xDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f380f400000
MIOpen(HIP): 	wDesc = {8, 128, 1, 1, 1}, {128, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f380f4ea000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff190456c8
MIOpen(HIP): 	yDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f380f4f9400
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 1 -H 72 -W 52 -k 8 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {8, 128, 1, 1, 1}, {128, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 8 128 1 1 1 }
MIOpen(HIP): 	stride.values = { 128 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 1 72 52 }
MIOpen(HIP): 	stride.values = { 29952 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff19045960
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff190456c0
MIOpen(HIP): 	xDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f380f400000
MIOpen(HIP): 	wDesc = {8, 128, 1, 1, 1}, {128, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f380f4ea000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff190456c8
MIOpen(HIP): 	yDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f380f4f9400
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 1 -H 72 -W 52 -k 8 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {8, 128, 1, 1, 1}, {128, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 8 128 1 1 1 }
MIOpen(HIP): 	stride.values = { 128 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 1 72 52 }
MIOpen(HIP): 	stride.values = { 29952 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff19045960
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff190456c0
MIOpen(HIP): 	xDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f380f400000
MIOpen(HIP): 	wDesc = {8, 128, 1, 1, 1}, {128, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f380f4ea000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff190456c8
MIOpen(HIP): 	yDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f380f4f9400
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 1 -H 72 -W 52 -k 8 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {8, 128, 1, 1, 1}, {128, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 8 128 1 1 1 }
MIOpen(HIP): 	stride.values = { 128 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 1 72 52 }
MIOpen(HIP): 	stride.values = { 29952 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff19045960
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff190456c0
MIOpen(HIP): 	xDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f380f400000
MIOpen(HIP): 	wDesc = {8, 128, 1, 1, 1}, {128, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f380f4ea000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff190456c8
MIOpen(HIP): 	yDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f380f4f9400
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 1 -H 72 -W 52 -k 8 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {8, 128, 1, 1, 1}, {128, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 128 1 72 52 }
MIOpen(HIP): 	stride.values = { 479232 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 8 128 1 1 1 }
MIOpen(HIP): 	stride.values = { 128 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 1 72 52 }
MIOpen(HIP): 	stride.values = { 29952 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7fff19045960
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7fff190456c0
MIOpen(HIP): 	xDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f380f400000
MIOpen(HIP): 	wDesc = {8, 128, 1, 1, 1}, {128, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f380f4ea000
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7fff190456c8
MIOpen(HIP): 	yDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f380f4f9400
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 128 --in_d 1 -H 72 -W 52 -k 8 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {8, 128, 1, 1, 1}, {128, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 128, 1, 72, 52}, {479232, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x2c21bcb8
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 1 72 52 }
MIOpen(HIP): 	stride.values = { 29952 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 16 8 1 1 1 }
MIOpen(HIP): 	stride.values = { 8 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 16 1 72 52 }
MIOpen(HIP): 	stride.values = { 59904 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe3460e840
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForwardGetWorkSpaceSize(miopenHandle_t, const miopenTensorDescriptor_t, const miopenTensorDescriptor_t, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, size_t *){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	wDesc = {16, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	xDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 16, 1, 72, 52}, {59904, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenFindConvolutionForwardAlgorithm(miopenHandle_t, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, const miopenTensorDescriptor_t, void *, const int, int *, miopenConvAlgoPerf_t *, void *, size_t, bool){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	xDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f52cd400000
MIOpen(HIP): 	wDesc = {16, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f52cd40ea00
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	yDesc = {1, 16, 1, 72, 52}, {59904, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f52cd40ee00
MIOpen(HIP): 	requestAlgoCount = 1
MIOpen(HIP): 	returnedAlgoCount = 8
MIOpen(HIP): 	perfResults = 
MIOpen(HIP): 	workSpace = 0x7f52cd42c200
MIOpen(HIP): 	workSpaceSize = 179968
MIOpen(HIP): 	exhaustiveSearch = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdFindConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 1 -H 72 -W 52 -k 16 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe3460e5a0
MIOpen(HIP): 	xDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f52cd400000
MIOpen(HIP): 	wDesc = {16, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f52cd40ea00
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe3460e5a8
MIOpen(HIP): 	yDesc = {1, 16, 1, 72, 52}, {59904, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f52cd40ee00
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 1 -H 72 -W 52 -k 16 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {16, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 16, 1, 72, 52}, {59904, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 1 72 52 }
MIOpen(HIP): 	stride.values = { 29952 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 16 8 1 1 1 }
MIOpen(HIP): 	stride.values = { 8 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 16 1 72 52 }
MIOpen(HIP): 	stride.values = { 59904 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe3460e840
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe3460e5a0
MIOpen(HIP): 	xDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f52cd400000
MIOpen(HIP): 	wDesc = {16, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f52cd40ea00
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe3460e5a8
MIOpen(HIP): 	yDesc = {1, 16, 1, 72, 52}, {59904, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f52cd42c200
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 1 -H 72 -W 52 -k 16 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {16, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 16, 1, 72, 52}, {59904, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 1 72 52 }
MIOpen(HIP): 	stride.values = { 29952 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 16 8 1 1 1 }
MIOpen(HIP): 	stride.values = { 8 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 16 1 72 52 }
MIOpen(HIP): 	stride.values = { 59904 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe3460e840
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe3460e5a0
MIOpen(HIP): 	xDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f52cd400000
MIOpen(HIP): 	wDesc = {16, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f52cd40ea00
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe3460e5a8
MIOpen(HIP): 	yDesc = {1, 16, 1, 72, 52}, {59904, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f52cd42c200
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 1 -H 72 -W 52 -k 16 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {16, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 16, 1, 72, 52}, {59904, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 1 72 52 }
MIOpen(HIP): 	stride.values = { 29952 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 16 8 1 1 1 }
MIOpen(HIP): 	stride.values = { 8 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 16 1 72 52 }
MIOpen(HIP): 	stride.values = { 59904 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe3460e840
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe3460e5a0
MIOpen(HIP): 	xDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f52cd400000
MIOpen(HIP): 	wDesc = {16, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f52cd40ea00
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe3460e5a8
MIOpen(HIP): 	yDesc = {1, 16, 1, 72, 52}, {59904, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f52cd42c200
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 1 -H 72 -W 52 -k 16 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {16, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 16, 1, 72, 52}, {59904, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 1 72 52 }
MIOpen(HIP): 	stride.values = { 29952 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 16 8 1 1 1 }
MIOpen(HIP): 	stride.values = { 8 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 16 1 72 52 }
MIOpen(HIP): 	stride.values = { 59904 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe3460e840
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe3460e5a0
MIOpen(HIP): 	xDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f52cd400000
MIOpen(HIP): 	wDesc = {16, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f52cd40ea00
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe3460e5a8
MIOpen(HIP): 	yDesc = {1, 16, 1, 72, 52}, {59904, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f52cd42c200
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 1 -H 72 -W 52 -k 16 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {16, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 16, 1, 72, 52}, {59904, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x1000f0001000f
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 8 1 72 52 }
MIOpen(HIP): 	stride.values = { 29952 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x3400000ea0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 16 8 1 1 1 }
MIOpen(HIP): 	stride.values = { 8 1 1 1 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateTensorDescriptor(miopenTensorDescriptor_t *){
MIOpen(HIP): 	tensorDesc = 0x5
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetTensorDescriptor(miopenTensorDescriptor_t, miopenDataType_t, int, const int *, const int *){
MIOpen(HIP): 	tensorDesc = {}, {}, packed, 
MIOpen(HIP): 	dataType = 5
MIOpen(HIP): 	nbDims = 5
MIOpen(HIP): 	dim.values = { 1 16 1 72 52 }
MIOpen(HIP): 	stride.values = { 59904 3744 3744 52 1 }
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenCreateConvolutionDescriptor(miopenConvolutionDescriptor_t *){
MIOpen(HIP): 	convDesc = 0x7ffe3460e840
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenInitConvolutionNdDescriptor(miopenConvolutionDescriptor_t, int, const int *, const int *, const int *, miopenConvolutionMode_t){
MIOpen(HIP): 	convDesc = conv2d, miopenConvolution, miopenPaddingDefault, {0, 0}, {1, 1}, {1, 1}, 
MIOpen(HIP): 	spatialDim = 3
MIOpen(HIP): 	pads = { 0 0 0 }
MIOpen(HIP): 	strides = { 1 1 1 }
MIOpen(HIP): 	dilations = { 1 1 1 }
MIOpen(HIP): 	c_mode = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionGroupCount(miopenConvolutionDescriptor_t, int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	groupCount = 1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenSetConvolutionAttribute(miopenConvolutionDescriptor_t, const miopenConvolutionAttrib_t, const int){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	attr = 1
MIOpen(HIP): 	value = 0
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenConvolutionForward(miopenHandle_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenTensorDescriptor_t, const void *, const miopenConvolutionDescriptor_t, miopenConvFwdAlgorithm_t, const void *, const miopenTensorDescriptor_t, void *, void *, size_t){
MIOpen(HIP): 	handle = stream: 0, device_id: 0
MIOpen(HIP): 	alpha = 0x7ffe3460e5a0
MIOpen(HIP): 	xDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	x = 0x7f52cd400000
MIOpen(HIP): 	wDesc = {16, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): 	w = 0x7f52cd40ea00
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): 	algo = 0
MIOpen(HIP): 	beta = 0x7ffe3460e5a8
MIOpen(HIP): 	yDesc = {1, 16, 1, 72, 52}, {59904, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): 	y = 0x7f52cd42c200
MIOpen(HIP): 	workSpace = nullptr
MIOpen(HIP): 	workSpaceSize = 0
MIOpen(HIP): }
MIOpen(HIP): Command [LogCmdConvolution] ./bin/MIOpenDriver convbfp16 -n 1 -c 8 --in_d 1 -H 72 -W 52 -k 16 --fil_d 1 -y 1 -x 1 --pad_d 0 -p 0 -q 0 --conv_stride_d 1 -u 1 -v 1 --dilation_d 1 -l 1 -j 1 --spatial_dim 3 -m conv -g 1 -F 1 -t 1
MIOpen(HIP): auto miopen::solver::conv::GemmFwd1x1_0_1::GetSolution(const ExecutionContext &, const ProblemDescription &)::(anonymous class)::operator()(const std::vector<Kernel> &)::(anonymous class)::operator()(const Handle &, const AnyInvokeParams &) const{
MIOpen(HIP): 	"convolution, 1x1" = convolution, 1x1
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyConvolutionDescriptor(miopenConvolutionDescriptor_t){
MIOpen(HIP): 	convDesc = conv3d, miopenConvolution, miopenPaddingDefault, {0, 0, 0}, {1, 1, 1}, {1, 1, 1}, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {16, 8, 1, 1, 1}, {8, 1, 1, 1, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 16, 1, 72, 52}, {59904, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
MIOpen(HIP): miopenStatus_t miopenDestroyTensorDescriptor(miopenTensorDescriptor_t){
MIOpen(HIP): 	tensorDesc = {1, 8, 1, 72, 52}, {29952, 3744, 3744, 52, 1}, packed, 
MIOpen(HIP): }
total elapsed: 536.241 ms
